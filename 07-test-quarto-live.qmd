---
format: 
  live-html:
    page-layout: article
    grid: 
      margin-width: 450px
      body-width: 2000px
engine: knitr
webr:
  packages: ['shiny']
---

{{< include ./_extensions/r-wasm/live/_knitr.qmd >}}

# Test Quarto Live {#sec-chap07}


```{r}
#| label: setup
#| results: hold
#| include: false

# base::source(file = "R/helper.R")
ggplot2::theme_set(ggplot2::theme_bw())
options(show.signif.stars = FALSE)

```

## Table of content for chapter 07 {.unnumbered}

::::: {#obj-chap05}
:::: {.my-objectives}
::: {.my-objectives-header}
Chapter section list
:::

::: {.my-objectives-container}


:::
::::
:::::

## Standard Block

```{webr}
for (x in 1:5) {
  print(x ** 2)
}
```

## Read only

```{webr}
#| edit: false
df <- data.frame(foo = c(1, 2, 3), bar = c(10, 20, 30))
df$foo
df$bar
```

## Autorun

```{webr}
#| autorun: true
123 + 456
```

## Immediate execution

```{webr}
#| caption: Immediate Execution
#| autorun: true
#| runbutton: false
foo <- 123
bar <- 246
foo + bar
```

## Autocomplete

```{webr}
#| autorun: true
#| completion: true
n_mean <- 120
n_sd <- 5

# Type "n_" to see context aware suggestions
```

## Execution without output

```{webr}
#| include: false
123
456
include_false_n <- 789
```

```{webr}
print(include_false_n)
```

## Storing & recalling code

```{webr}
#| startover: false
foo <- c(2, 4, 6, 8)
foo + 1
```

````markdown
```{{webr}}
#| persist: true
foo <- c(1, 3, 5, 7)
foo + 1
```
````


```{webr}
#| persist: true
foo <- c(1, 3, 5, 7)
foo + 1
```

## Execuation Time Limit

````markdown
```{{webr}}
#| timelimit: 2
while (TRUE) {
  # Loop, infinitely
}
```
````

```{webr}
#| timelimit: 2
while (TRUE) {
  # Loop, infinitely
    print("*")
    Sys.sleep(0.5)
}
```

## Editor height

````markdown
```{{webr}}
#| min-lines: 6
#| max-lines: 10
x <- 173

y <- 205

x + y
```
````


```{webr}
#| min-lines: 6
#| max-lines: 10
x <- 173

y <- 205

x + y
```


## Cross references

::: {#lst-ref}

```{webr}
mod <- lm(mpg ~ cyl, data = mtcars)
summary(mod)
```

An interactive R code block, with an example of fitting a linear model.

:::

See @lst-ref for details.

## shinylive code chunk

```{shinylive-r}
#| standalone: true
#| viewerHeight: 400

library(shiny)

ui <- fluidPage(
    textInput("name", "What's your name?"),
    textOutput("greeting")
)

server <- function(input, output, session) {
    output$greeting <- renderText({
        paste0("Hello ", input$name)
    })
}

shinyApp(ui, server)

```

## shiny with webr

```{webr}

#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    https://shiny.posit.co/
#

library(shiny)

# Define UI for application that draws a histogram
ui <- fluidPage(

    # Application title
    titlePanel("Old Faithful Geyser Data"),

    # Sidebar with a slider input for number of bins
    sidebarLayout(
        sidebarPanel(
            sliderInput("bins",
                        "Number of bins:",
                        min = 1,
                        max = 50,
                        value = 30)
        ),

        # Show a plot of the generated distribution
        mainPanel(
           plotOutput("distPlot")
        )
    )
)

# Define server logic required to draw a histogram
server <- function(input, output) {

    output$distPlot <- renderPlot({
        # generate bins based on input$bins from ui.R
        x    <- faithful[, 2]
        bins <- seq(min(x), max(x), length.out = input$bins + 1)

        # draw the histogram with the specified number of bins
        hist(x, breaks = bins, col = 'darkgray', border = 'white',
             xlab = 'Waiting time to next eruption (in mins)',
             main = 'Histogram of waiting times')
    })
}

# Run the application
shinyApp(ui = ui, server = server)

```

