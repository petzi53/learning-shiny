{
  "hash": "451769c9de325c178ff7f4907d9e4e75",
  "result": {
    "engine": "knitr",
    "markdown": "# Case study: ER injuries {#sec-chap04}\n\n\n\n## Introduction\n\nThis time I have loaded the packages {**shiny**}, {**vroom**} (for fast file reading) and {**tidyverse**} (for general data analyzing) only once in the initializing `setup` code chunk.\n\n\n\n::::: {#obj-chap04}\n:::: {.my-objectives}\n::: {.my-objectives-header}\nChapter section list\n:::\n\n::: {.my-objectives-container}\n\n\n:::\n::::\n:::::\n\n## The data\n\nWe’re going to explore data from the National Electronic Injury Surveillance System (NEISS), collected by the Consumer Product Safety Commission. This is a long-term study that records all accidents seen in a representative sample of hospitals in the United States. It’s an interesting dataset to explore because every one is already familiar with the domain, and each observation is accompanied by a short narrative that explains how the accident occurred. You can find out more about this dataset at <https://github.com/hadley/neiss>.\n\nIn this chapter, I’m going to focus on just the data from 2017. This keeps the data small enough (~10 MB) that it’s easy to store in git (along with the rest of the book), which means we don’t need to think about sophisticated strategies for importing the data quickly (we’ll come back to those later in the book). You can see the code I used to create the extract for this chapter at <https://github.com/hadley/mastering-shiny/blob/main/neiss/data.R>.\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-04-download-neiss-data}\n: Download the NEISS dataset\n::::::\n:::\n::::{.my-r-code-container}\n\n<center>**Run this code chunk manually if the file(s) still needs to be downloaded.**</center>\n\n::: {.cell}\n\n```{.r .cell-code}\ndir.create(\"neiss\")\n\ndownload <- function(name) {\n  url <- \"https://raw.github.com/hadley/mastering-shiny/main/neiss/\"\n  download.file(paste0(url, name), paste0(\"neiss/\", name), quiet = TRUE)\n}\ndownload(\"injuries.tsv.gz\")\ndownload(\"population.tsv\")\ndownload(\"products.tsv\")\n```\n:::\n\n\n::::\n:::::\n\n\nThe main dataset we’ll use is `injuries`, which contains around 250,000 observations:\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-04-show-neiss-data-injuries}\n: Show first rows of the NEISS dataset\n::::::\n:::\n::::{.my-r-code-container}\n\n::: {.cell}\n\n```{.r .cell-code}\ninjuries <- vroom::vroom(\"neiss/injuries.tsv.gz\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n#> Rows: 255064 Columns: 10\n#> ── Column specification ────────────────────────────────────────────────────────\n#> Delimiter: \"\\t\"\n#> chr  (6): sex, race, body_part, diag, location, narrative\n#> dbl  (3): age, prod_code, weight\n#> date (1): trmt_date\n#> \n#> ℹ Use `spec()` to retrieve the full column specification for this data.\n#> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n```{.r .cell-code}\ninjuries\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> # A tibble: 255,064 × 10\n#>    trmt_date    age sex    race       body_part  diag  location prod_code weight\n#>    <date>     <dbl> <chr>  <chr>      <chr>      <chr> <chr>        <dbl>  <dbl>\n#>  1 2017-01-01    71 male   white      Upper Tru… Cont… Other P…      1807   77.7\n#>  2 2017-01-01    16 male   white      Lower Arm  Burn… Home           676   77.7\n#>  3 2017-01-01    58 male   white      Upper Tru… Cont… Home           649   77.7\n#>  4 2017-01-01    21 male   white      Lower Tru… Stra… Home          4076   77.7\n#>  5 2017-01-01    54 male   white      Head       Inte… Other P…      1807   77.7\n#>  6 2017-01-01    21 male   white      Hand       Frac… Home          1884   77.7\n#>  7 2017-01-01    35 female not stated Lower Tru… Stra… Home          1807   87.1\n#>  8 2017-01-01    62 female not stated Lower Arm  Lace… Home          4074   87.1\n#>  9 2017-01-01    22 male   not stated Knee       Disl… Home          4076   87.1\n#> 10 2017-01-01    58 female not stated Lower Leg  Frac… Home          1842   87.1\n#> # ℹ 255,054 more rows\n#> # ℹ 1 more variable: narrative <chr>\n```\n\n\n:::\n:::\n\n\n::::\n:::::\n\nEach row represents a single accident with 10 variables:\n\n- `trmt_date` is date the person was seen in the hospital (not when the accident occurred).\n- `age`, `sex`, and `race` give demographic information about the person who experienced the accident.\n- `body_part` is the location of the injury on the body (like ankle or ear); location is the place where the accident occurred (like home or school).\n- `diag` gives the basic diagnosis of the injury (like fracture or laceration).\n- `prod_code` is the primary product associated with the injury.\n`weight` is statistical weight giving the estimated number of people who would suffer this injury if this dataset was scaled to the entire population of the US.\n- `narrative` is a brief story about how the accident occurred.\n\nWe’ll pair it with two other data frames for additional context: `products` lets us look up the product name from the product code, and `population` tells us the total US population in 2017 for each combination of age and sex.\n\n::: {.my-code-collection}\n:::: {.my-code-collection-header}\n::::: {.my-code-collection-icon}\n:::::\n:::::: {#exm-04-load-additonal-datasets}\n: Load and show additional datasets\n::::::\n\n::::\n\n::::{.my-code-collection-container}\n\n::: {.panel-tabset}\n\n###### products\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-load-show-products}\n: Load and show the `products` dataset\n::::::\n:::\n::::{.my-r-code-container}\n\n::: {.cell}\n\n```{.r .cell-code}\nproducts <- vroom::vroom(\"neiss/products.tsv\")\nproducts\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> # A tibble: 38 × 2\n#>    prod_code title                                   \n#>        <dbl> <chr>                                   \n#>  1       464 knives, not elsewhere classified        \n#>  2       474 tableware and accessories               \n#>  3       604 desks, chests, bureaus or buffets       \n#>  4       611 bathtubs or showers                     \n#>  5       649 toilets                                 \n#>  6       676 rugs or carpets, not specified          \n#>  7       679 sofas, couches, davenports, divans or st\n#>  8      1141 containers, not specified               \n#>  9      1200 sports or recreational activity, n.e.c. \n#> 10      1205 basketball (activity, apparel or equip.)\n#> # ℹ 28 more rows\n```\n\n\n:::\n:::\n\n\n::::\n:::::\n\n\n###### population\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-04-load-show-population}\n: Load ans show the `population` dataset\n::::::\n:::\n::::{.my-r-code-container}\n\n::: {.cell}\n\n```{.r .cell-code}\npopulation <- vroom::vroom(\"neiss/population.tsv\")\npopulation\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> # A tibble: 170 × 3\n#>      age sex    population\n#>    <dbl> <chr>       <dbl>\n#>  1     0 female    1924145\n#>  2     0 male      2015150\n#>  3     1 female    1943534\n#>  4     1 male      2031718\n#>  5     2 female    1965150\n#>  6     2 male      2056625\n#>  7     3 female    1956281\n#>  8     3 male      2050474\n#>  9     4 female    1953782\n#> 10     4 male      2042001\n#> # ℹ 160 more rows\n```\n\n\n:::\n:::\n\n\n::::\n:::::\n\n:::\n\n::::\n:::::\n\n\n\n\n\n\n## Exploration\n\n::: {.my-code-collection}\n:::: {.my-code-collection-header}\n::::: {.my-code-collection-icon}\n:::::\n:::::: {#exm-04-explore-dataset}\n: Explore the dataset(s)\n::::::\n\n::::\n\n::::{.my-code-collection-container}\n\n::: {.panel-tabset}\n\n###### toilets\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-04-injuries-toilets}\n: Pull out the injuries associated with `toilets`\n::::::\n:::\n::::{.my-r-code-container}\n\n::: {.cell}\n\n```{.r .cell-code}\nselected <- injuries |> filter(prod_code == 649)\nnrow(selected)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> [1] 2993\n```\n\n\n:::\n:::\n\n\n\n***\n\nFrom 255064 accidents in the year 2017 2993 (1.17%) involved a toilet.\n::::\n:::::\n\n\n###### location\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-04-location-summary}\n: Location where the accident with the toilet happened\n::::::\n:::\n::::{.my-r-code-container}\n\n::: {.cell}\n\n```{.r .cell-code}\nselected |> count(location, wt = weight, sort = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> # A tibble: 6 × 2\n#>   location                         n\n#>   <chr>                        <dbl>\n#> 1 Home                       99603. \n#> 2 Other Public Property      18663. \n#> 3 Unknown                    16267. \n#> 4 School                       659. \n#> 5 Street Or Highway             16.2\n#> 6 Sports Or Recreation Place    14.8\n```\n\n\n:::\n:::\n\n\n***\n\nAs you might expect, injuries involving toilets most often occur at home.\n::::\n:::::\n\n###### body part\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-04-summary-body-part}\n: Body part affected of the injury connected with a toilet\n::::::\n:::\n::::{.my-r-code-container}\n\n::: {.cell}\n\n```{.r .cell-code}\nselected |> count(body_part, wt = weight, sort = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> # A tibble: 24 × 2\n#>    body_part        n\n#>    <chr>        <dbl>\n#>  1 Head        31370.\n#>  2 Lower Trunk 26855.\n#>  3 Face        13016.\n#>  4 Upper Trunk 12508.\n#>  5 Knee         6968.\n#>  6 N.S./Unk     6741.\n#>  7 Lower Leg    5087.\n#>  8 Shoulder     3590.\n#>  9 All Of Body  3438.\n#> 10 Ankle        3315.\n#> # ℹ 14 more rows\n```\n\n\n:::\n:::\n\n\n***\nThe most common body parts involved possibly suggest that these are falls (since the head and face are not usually involved in routine toilet usage).\n\n::::\n:::::\n\n\n###### diagnosis\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-04-summary-diagnosis}\n: Diagnosis resulted from the accident that involved a toilet\n::::::\n:::\n::::{.my-r-code-container}\n\n::: {.cell}\n\n```{.r .cell-code}\nselected |> count(diag, wt = weight, sort = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> # A tibble: 20 × 2\n#>    diag                        n\n#>    <chr>                   <dbl>\n#>  1 Other Or Not Stated   32897. \n#>  2 Contusion Or Abrasion 22493. \n#>  3 Inter Organ Injury    21525. \n#>  4 Fracture              21497. \n#>  5 Laceration            18734. \n#>  6 Strain, Sprain         7609. \n#>  7 Dislocation            2713. \n#>  8 Hematoma               2386. \n#>  9 Avulsion               1778. \n#> 10 Nerve Damage           1091. \n#> 11 Poisoning               928. \n#> 12 Concussion              822. \n#> 13 Dental Injury           199. \n#> 14 Hemorrhage              167. \n#> 15 Crushing                114. \n#> 16 Dermat Or Conj           84.2\n#> 17 Burns, Not Spec          67.2\n#> 18 Puncture                 67.2\n#> 19 Burns, Thermal           34.0\n#> 20 Burns, Scald             17.0\n```\n\n\n:::\n:::\n\n\n***\nThe diagnoses seem rather varied. There is no pattern recognizable.\n\n::::\n:::::\n\n:::\n\n::::\n:::::\n\n\nWe can also explore the pattern across age and sex. We have enough data here that a table is not that useful, and so I make a plot, @fig-pattern-age-sex-total, that makes the patterns more obvious.\n\n::: {.my-code-collection}\n:::: {.my-code-collection-header}\n::::: {.my-code-collection-icon}\n:::::\n:::::: {#exm-04-pattern-age-sex}\n: Pattern across age and sex\n::::::\n\n::::\n\n::::{.my-code-collection-container}\n\n::: {.panel-tabset}\n\n###### total\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-04-pattern-age-sex-total}\n: Calculate and show the number of accidents broken down by age and sex\n::::::\n:::\n::::{.my-r-code-container}\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary <- selected %>% \n  count(age, sex, wt = weight)\nsummary\n\nsummary %>% \n  ggplot(aes(age, n, colour = sex)) + \n  geom_line() + \n  labs(y = \"Estimated number of injuries\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> # A tibble: 208 × 3\n#>      age sex          n\n#>    <dbl> <chr>    <dbl>\n#>  1     0 female    4.76\n#>  2     0 male     14.3 \n#>  3     1 female  253.  \n#>  4     1 male    231.  \n#>  5     2 female  438.  \n#>  6     2 male    632.  \n#>  7     3 female  381.  \n#>  8     3 male   1004.  \n#>  9     4 female  261.  \n#> 10     4 male    843.  \n#> # ℹ 198 more rows\n```\n\n\n:::\n\n::: {.cell-output-display}\n![Estimated number of injuries caused by toilets, broken down by age and sex](04-er-injuries_files/figure-html/fig-pattern-age-sex-total-1.png){#fig-pattern-age-sex-total width=672}\n:::\n:::\n\n\n***\n\nWe see a spike for young boys peaking at age 3, and then an increase (particularly for women) starting around middle age, and a gradual decline after age 80. I suspect the peak is because boys usually use the toilet standing up, and the increase for women is due to osteoporosis (i.e. I suspect women and men have injuries at the same rate, but more women end up in the ER because they are at higher risk of fractures).\n\n\n::::\n:::::\n\nOne problem with interpreting this pattern is that we know that there are fewer older people than younger people, so the population available to be injured is smaller. We can control for this by comparing the number of people injured with the total population and calculating an injury rate. See the next tab, where a rate per 10,000 is used.\n\n###### per 10,000\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-04-pattern-age-sex-rate}\n: Calculate and show the number of accidents per 10,000 people broken down by age and sex\n::::::\n:::\n::::{.my-r-code-container}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary <- selected %>% \n  count(age, sex, wt = weight) %>% \n  left_join(population, by = c(\"age\", \"sex\")) %>% \n  mutate(rate = n / population * 1e4)\n\nsummary\n\nsummary %>% \n  ggplot(aes(age, rate, colour = sex)) + \n  geom_line(na.rm = TRUE) + \n  labs(y = \"Injuries per 10,000 people\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> # A tibble: 208 × 5\n#>      age sex          n population   rate\n#>    <dbl> <chr>    <dbl>      <dbl>  <dbl>\n#>  1     0 female    4.76    1924145 0.0247\n#>  2     0 male     14.3     2015150 0.0708\n#>  3     1 female  253.      1943534 1.30  \n#>  4     1 male    231.      2031718 1.14  \n#>  5     2 female  438.      1965150 2.23  \n#>  6     2 male    632.      2056625 3.07  \n#>  7     3 female  381.      1956281 1.95  \n#>  8     3 male   1004.      2050474 4.90  \n#>  9     4 female  261.      1953782 1.33  \n#> 10     4 male    843.      2042001 4.13  \n#> # ℹ 198 more rows\n```\n\n\n:::\n\n::: {.cell-output-display}\n![Estimated rate of injuries per 10,000 people, broken down by age and sex](04-er-injuries_files/figure-html/fig-pattern-age-sex-rate-1.png){#fig-pattern-age-sex-rate width=672}\n:::\n:::\n\n\n***\n(Note that the rates only go up to age 80 because I couldn’t find population data for ages over 80.)\n\nPlotting the rate yields a strikingly different trend after age 50: the difference between men and women is much smaller, and we no longer see a decrease. This is because women tend to live longer than men, so at older ages there are simply more women alive to be injured by toilets.\n\n::::\n:::::\n\n:::\n\n::::\n:::::\n\n\n\nFinally, we can look at some of the narratives. Browsing through these is an informal way to check our hypotheses, and generate new ideas for further exploration. Here I pull out a random sample of 20:\n\n\n:::{.column-page}\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-04-pull-out-narratives}\n: Pull out 20 random examples of the narrative\n::::::\n:::\n::::{.my-r-code-container}\n\n::: {.cell}\n\n```{.r .cell-code}\nselected %>% \n  sample_n(20) %>% \n  pull(narrative)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#>  [1] \"61YOF SYNCOPE STANDING FROM TOILET\"                                                                                                \n#>  [2] \"5 YOM SUSTAINED INJURY CHEST ABDOMEN AFTER FALLING OFF TOILET HITTING TTUB DX CONTUSION LEFT CHEST\"                                \n#>  [3] \"87 YO FEMALE HURT GETTING OFF HER TOILET. DX ACUTE KNEE PAIN\"                                                                      \n#>  [4] \"69 YOM LAC TO ARM FROM WORKING ON TOILET\"                                                                                          \n#>  [5] \"63 YR OLD FEMALE MOVING BOX OFF TOILET AND FELL HITTING HEAD ON TUB ANDADMIT FOR WEAKNESS\"                                         \n#>  [6] \"64 YOF FELL FROM TOILET, UNRESPONSIVE  DX;  CARDIAC ARREST\"                                                                        \n#>  [7] \"87YOF FROM THE NURSING HOME TRYING TO TRANSFER FROM THE WHEELCHAIR TO THE TOILET AND FELL CONTUSION TO KNEE ADMITTED FOTR WEAKNESS\"\n#>  [8] \"58YOF WHEELCHAIR BOUND WAS TRANSFERING FROM WHEELCHAIR TO TOILET WHEN SHE FELL DX LT PATELLA FX\"                                   \n#>  [9] \"98YOM FELL OFF THE TOILET AT THE NURSING HOME AND LANDED ONTO HEAD CLOSED HEAD INJURY\"                                             \n#> [10] \"80YF FELT DIZZY GETTING UP OFF THE COMMODE/TOIELT&FELLC/O>>THIGH&HIP PAIN\"                                                         \n#> [11] \"76YOM TO ED C/O RIB PAIN SUSTAINED A FALL WHILE TRANSFERING FROM HIS WHEELCHAIR TO THE TOILET DX: CHEST WALL CONTUSION.\"           \n#> [12] \"2YOM LAC CHIN- FELL FR SHOWER ONTO TOILET\"                                                                                         \n#> [13] \"71 YOM FELL AT *** TODAY WHILE TRANSFERRING FROM WHEELCHAIR TO TOILETAND STRUCK KNEE. DX PATELLAR FX\"                              \n#> [14] \"4YOM LAC F'HD- FELL ON TOILET\"                                                                                                     \n#> [15] \"69YOF FELL WHILE TRYING TO GET ON POTTY CHAIR, HURT LOWER LEG.DX   CONT. LOWER LEG.\"                                               \n#> [16] \"46YM DROPPED A TOILET WHICH SHATTERED CUTTING HIS KNEE>>LAC\"                                                                       \n#> [17] \"73YOF PASSED OUT ON THE TOILET AND FELL OFF ONTO HEAD SUSTAINED A SCALPCONTUSION ADMITTED FOR PNEUMONIA\"                           \n#> [18] \"A 60YOM FELL IN BATHROOM, HIT HEAD ON TOILET, LAC TO HEAD\"                                                                         \n#> [19] \"49 YO F HIP PAIN WHILE SITTING ON TOILET\"                                                                                          \n#> [20] \"91 YR OLD FEMALE FELL GETTING OFF TOILET WITH KNEE PAIN\"\n```\n\n\n:::\n:::\n\n\n::::\n:::::\n:::\n\nHaving done this exploration for one product, it would be very nice if we could easily do it for other products, without having to retype the code. So let’s make a Shiny app!\n\n## Prototype\n\n::: {.callout-note}\nWhen building a complex app, I strongly recommend starting as simple as possible, so that you can confirm the basic mechanics work before you start doing something more complicated.\n:::\n\nHere I’ll start with one input (the product code), three tables, and one plot. When designing a first prototype, the challenge is in making it “as simple as possible”. There’s a tension between getting the basics working quickly and planning for the future of the app. Either extreme can be bad: \n\n- **if you design too narrowly**, you’ll spend a lot of time later on reworking your app; \n- **if you design too rigorously**, you’ll spend a bunch of time writing code that later ends up on the cutting floor. \n\nTo help get the balance right, I often do a few pencil-and-paper sketches to rapidly explore the UI and reactive graph before committing to code.\n\n\n\n:::{.column-screen-inset}\n\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-04-shiny-ER-prototype-shiny}\n: Shiny app for emergency room (ER) prototype\n::::::\n:::\n::::{.my-r-code-container}\n```{shinylive-r}\n#| standalone: true\n#| viewerHeight: 1300\n#| components: [editor, viewer]\n\nlibrary(shiny)\nlibrary(tidyverse)\nlibrary(munsell)\n\nbase::source(\n  \"https://raw.githubusercontent.com/petzi53/learning-shiny/refs/heads/master/R/neiss.R\")\n\n\nui <- fluidPage(\n  fluidRow(\n    column(8,\n      selectInput(\"code\", \"Product\", \n                  choices = prod_codes,\n                  width = \"100%\")\n    )\n  ),\n  fluidRow(\n    column(4, tableOutput(\"diag\")), \n    column(4, tableOutput(\"location\")),\n    column(4, tableOutput(\"body_part\"))\n\n  ),\n  fluidRow(\n    column(12, plotOutput(\"age_sex\"))\n  )\n)\n\nserver <- function(input, output, session) {\n  selected <- reactive(injuries %>% filter(prod_code == input$code))\n\n  output$diag <- renderTable(\n    selected() %>% count(diag, wt = weight, sort = TRUE), width = \"100%\"\n  )\n  output$body_part <- renderTable(\n    selected() %>% count(body_part, wt = weight, sort = TRUE), width = \"100%\"\n  )\n  output$location <- renderTable(\n    selected() %>% count(location, wt = weight, sort = TRUE), width = \"100%\"\n  )\n\n  summary <- reactive({\n    selected() %>%\n      count(age, sex, wt = weight) %>%\n      left_join(population, by = c(\"age\", \"sex\")) %>%\n      mutate(rate = n / population * 1e4)\n  })\n\n  output$age_sex <- renderPlot({\n    summary() %>%\n      ggplot(aes(age, n, colour = sex)) +\n      geom_line() +\n      labs(y = \"Estimated number of injuries\")\n  }, res = 96)\n}\n\n\nshinyApp(ui, server)\n```\n\n::::\n:::::\n\n:::\n\n## Polish tables\n\nNow that we have the basic components in place and working, we can progressively improve our app. The first problem with this app is that it shows a lot of information in the tables, where we probably just want the highlights. To fix this we need to first figure out how to truncate the tables. I’ve chosen to do that with a combination of {**forcats**} functions: I convert the variable to a factor, order by the frequency of the levels, and then lump together all levels after the top 5.\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-04-polish-table-injuries}\n: Polish injuries table\n::::::\n:::\n::::{.my-r-code-container}\n\n::: {.cell}\n\n```{.r .cell-code}\n(\n  injuries |> \n    dplyr::mutate(\n      diag = forcats::fct_lump(\n        forcats::fct_infreq(diag), \n        n = 5))  |> \n    dplyr::group_by(diag)  |> \n    dplyr::summarise(n = base::as.integer(base::sum(weight)))\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> # A tibble: 6 × 2\n#>   diag                        n\n#>   <fct>                   <int>\n#> 1 Other Or Not Stated   1806436\n#> 2 Fracture              1558961\n#> 3 Laceration            1432407\n#> 4 Strain, Sprain        1432556\n#> 5 Contusion Or Abrasion 1451987\n#> 6 Other                 1929147\n```\n\n\n:::\n:::\n\n\n::::\n:::::\n\nI wrote a little function to automate this for any variable. The details aren’t really important here, but we’ll come back to them in @XXX_12.\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-04-polish-table-function}\n: Function for polish table\n::::::\n:::\n::::{.my-r-code-container}\n\n::: {.cell}\n\n```{.r .cell-code}\ncount_top <- function(df, var, n = 5) {\n  df |> \n    dplyr::mutate(\n      {{ var }} := forcats::fct_lump(\n        forcats::fct_infreq({{ var }}), \n        n = n)\n      )  |> \n    dplyr::group_by({{ var }})  |> \n    dplyr::summarise(n = base::as.integer(base::sum(weight)))\n}\n```\n:::\n\n\n::::\n:::::\n\n\nI made one other change to improve the aesthetics of the app: I forced all tables to take up the maximum width (i.e. fill the column that they appear in). This makes the output more aesthetically pleasing because it reduces the amount of incidental variation.\n\n:::{.column-screen-inset}\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-04-polished-ER-neiss}\n: Polished ER shiny app\n::::::\n:::\n::::{.my-r-code-container}\n```{shinylive-r}\n#| standalone: true\n#| viewerHeight: 720\n#| components: [editor, viewer]\n\n\nlibrary(shiny)\nlibrary(tidyverse)\nlibrary(munsell)\n\n##>> get data and functions\nbasic_url = \"https://raw.githubusercontent.com/petzi53/learning-shiny/refs/heads/master/\"\nbase::source(base::paste0(basic_url, \"R/neiss.R\"))\n##>>\n\n\nlibrary(shiny)\nlibrary(tidyverse)\nlibrary(munsell)\n\nui <- fluidPage(\n  fluidRow(\n    column(8,\n      selectInput(\"code\", \"Product\", \n          choices = prod_codes, width = \"100%\")\n    )\n  ),\n  fluidRow(\n    column(4, tableOutput(\"diag\")), \n    column(4, tableOutput(\"location\")), \n    column(4, tableOutput(\"body_part\"))\n  ),\n  fluidRow(\n    column(12, plotOutput(\"age_sex\"))\n  )\n)\n\nserver <- function(input, output, session) {\n  selected <- reactive(injuries %>% filter(prod_code == input$code))\n  \n  ##<< tables\n  output$diag <- renderTable(count_top(selected(), diag), width = \"100%\")\n  output$body_part <- renderTable(count_top(selected(), body_part), width = \"100%\")\n  output$location <- renderTable(count_top(selected(), location), width = \"100%\")\n  ##>>\n  \n  summary <- reactive({\n    selected() %>%\n      count(age, sex, wt = weight) %>%\n      left_join(population, by = c(\"age\", \"sex\")) %>%\n      mutate(rate = n / population * 1e4)\n  })\n\n  output$age_sex <- renderPlot({\n    summary() %>%\n      ggplot(aes(age, n, colour = sex)) +\n      geom_line() +\n      labs(y = \"Estimated number of injuries\")\n  }, res = 96)\n}\n\n\nshinyApp(ui, server)\n```\n\n::::\n:::::\n\n:::\n\n## Rate vs count\n\nSo far, we’re displaying only a single plot, but we’d like to give the user the choice between visualizing the number of injuries or the population-standardized rate. First I add a control to the UI. Here I’ve chosen to use a `shiny::selectInput()` because it makes both states explicit, and it would be easy to add new states in the future:\n\n:::{.column-screen-inset}\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-04-polished-ER-neiss}\n: ER shiny app with rate and count\n::::::\n:::\n::::{.my-r-code-container}\n```{shinylive-r}\n#| standalone: true\n#| viewerHeight: 720\n#| components: [editor, viewer]\n\n\nlibrary(shiny)\nlibrary(tidyverse)\nlibrary(munsell)\n\n##>> get data and functions\nbasic_url = \"https://raw.githubusercontent.com/petzi53/learning-shiny/refs/heads/master/\"\nbase::source(base::paste0(basic_url, \"R/neiss.R\"))\n##>>\n\n\nlibrary(shiny)\nlibrary(tidyverse)\nlibrary(munsell)\n\nui <- fluidPage(\n  fluidRow(\n    column(8,\n      selectInput(\"code\", \"Product\",\n        choices = setNames(products$prod_code, products$title),\n        width = \"100%\"\n      )\n    ),\n    column(2, selectInput(\"y\", \"Y axis\", c(\"rate\", \"count\")))\n  ),\n  fluidRow(\n    column(4, tableOutput(\"diag\")), \n    column(4, tableOutput(\"location\")), \n    column(4, tableOutput(\"body_part\"))\n  ),\n  fluidRow(\n    column(12, plotOutput(\"age_sex\"))\n  )\n)\n\nserver <- function(input, output, session) {\n  selected <- reactive(injuries %>% filter(prod_code == input$code))\n  \n  ##<< tables\n  output$diag <- renderTable(count_top(selected(), diag), width = \"100%\")\n  output$body_part <- renderTable(count_top(selected(), body_part), width = \"100%\")\n  output$location <- renderTable(count_top(selected(), location), width = \"100%\")\n  ##>>\n  \n  summary <- reactive({\n    selected() %>%\n      count(age, sex, wt = weight) %>%\n      left_join(population, by = c(\"age\", \"sex\")) %>%\n      mutate(rate = n / population * 1e4)\n  })\n\n    output$age_sex <- renderPlot({\n    if (input$y == \"count\") {\n      summary() %>%\n        ggplot(aes(age, n, colour = sex)) +\n        geom_line() +\n        labs(y = \"Estimated number of injuries\")\n    } else {\n      summary() %>%\n        ggplot(aes(age, rate, colour = sex)) +\n        geom_line(na.rm = TRUE) +\n        labs(y = \"Injuries per 10,000 people\")\n    }\n  }, res = 96)\n}\n\n\nshinyApp(ui, server)\n```\n\n::::\n:::::\n\n:::\n\n## Narrative\n\nFinally, I want to provide some way to access the narratives because they are so interesting, and they give an informal way to cross-check the hypotheses you come up with when looking at the plots. In the R code, I sample multiple narratives at once, but there’s no reason to do that in an app where you can explore interactively.\n\nThere are two parts to the solution. \n\n- First we add a new row to the bottom of the UI. I use an action button to trigger a new story, and put the narrative in a `shiny::textOutput()`:\n- I then use `shiny::eventReactive()` to create a reactive that only updates when the button is clicked or the underlying data changes.\n\n::: {.my-code-collection}\n:::: {.my-code-collection-header}\n::::: {.my-code-collection-icon}\n:::::\n:::::: {#exm-04-neiss-narrative}\n: Code snippets for narratives of ER injuries\n::::::\n\n::::\n\n::::{.my-code-collection-container}\n\n::: {.panel-tabset}\n\n###### Button\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-04-neiss-narrative-button}\n: Code Snippet: Create button in the UI\n::::::\n:::\n::::{.my-r-code-container}\n\n::: {.cell}\n\n```{.r .cell-code}\n  fluidRow(\n    column(2, actionButton(\"story\", \"Tell me a story\")),\n    column(10, textOutput(\"narrative\"))\n  )\n```\n:::\n\n\n::::\n:::::\n\n\n###### Update\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-04-neiss-narrative-update}\n: Code snippet: Update whenever button pressed or data changed\n::::::\n:::\n::::{.my-r-code-container}\n\n::: {.cell}\n\n```{.r .cell-code}\n  narrative_sample <- eventReactive(\n    list(input$story, selected()),\n    selected() %>% pull(narrative) %>% sample(1)\n  )\n  output$narrative <- renderText(narrative_sample())\n```\n:::\n\n\n::::\n:::::\n\n:::\n\n::::\n:::::\n\n\n\n\n\n:::{.column-screen-inset}\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-04-finished-ER-injuries}\n: ER injuries shiny app finished version\n::::::\n:::\n::::{.my-r-code-container}\n```{shinylive-r}\n#| standalone: true\n#| viewerHeight: 780\n#| components: [editor, viewer]\n\n\nlibrary(shiny)\nlibrary(tidyverse)\nlibrary(munsell)\n\n##>> get data and functions\nbasic_url = \"https://raw.githubusercontent.com/petzi53/learning-shiny/refs/heads/master/\"\nbase::source(base::paste0(basic_url, \"R/neiss.R\"))\n##>>\n\n\nlibrary(shiny)\nlibrary(tidyverse)\nlibrary(munsell)\n\nui <- fluidPage(\n  fluidRow(\n    column(8,\n      selectInput(\"code\", \"Product\",\n        choices = setNames(products$prod_code, products$title),\n        width = \"100%\"\n      )\n    ),\n    column(2, selectInput(\"y\", \"Y axis\", c(\"rate\", \"count\")))\n  ),\n  fluidRow(\n    column(4, tableOutput(\"diag\")), \n    column(4, tableOutput(\"location\")), \n    column(4, tableOutput(\"body_part\"))\n  ),\n  fluidRow(\n    column(12, plotOutput(\"age_sex\"))\n  ),\n  fluidRow(\n    column(2, actionButton(\"story\", \"Tell me a story\")),\n    column(10, textOutput(\"narrative\"))\n  )\n)\n\nserver <- function(input, output, session) {\n  selected <- reactive(injuries %>% filter(prod_code == input$code))\n  \n    ##<< tables\n    output$diag <- renderTable(count_top(selected(), diag), width = \"100%\")\n    output$body_part <- renderTable(count_top(selected(), body_part), width = \"100%\")\n    output$location <- renderTable(count_top(selected(), location), width = \"100%\")\n    ##>>\n  \n    summary <- reactive({\n      selected() %>%\n        count(age, sex, wt = weight) %>%\n        left_join(population, by = c(\"age\", \"sex\")) %>%\n        mutate(rate = n / population * 1e4)\n    })\n\n    output$age_sex <- renderPlot({\n    if (input$y == \"count\") {\n      summary() %>%\n        ggplot(aes(age, n, colour = sex)) +\n        geom_line() +\n        labs(y = \"Estimated number of injuries\")\n    } else {\n      summary() %>%\n        ggplot(aes(age, rate, colour = sex)) +\n        geom_line(na.rm = TRUE) +\n        labs(y = \"Injuries per 10,000 people\")\n    }\n  }, res = 96)\n    \n    narrative_sample <- eventReactive(\n      list(input$story, selected()),\n      selected() %>% pull(narrative) %>% sample(1)\n  )\n    output$narrative <- renderText(narrative_sample())\n}\n\n\nshinyApp(ui, server)\n```\n\n::::\n:::::\n\n:::\n",
    "supporting": [
      "04-er-injuries_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}