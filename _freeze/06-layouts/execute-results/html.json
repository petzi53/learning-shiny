{
  "hash": "9d33f7b49251b504310aeaa1c0d03199",
  "result": {
    "engine": "knitr",
    "markdown": "# Layouts, themes, HTML {#sec-chap06}\n\n\n\n## Introduction\n\n:::::: {#obj-chap06}\n::::: my-objectives\n::: my-objectives-header\nChapter section list\n:::\n\n::: my-objectives-container\n:::\n:::::\n::::::\n\n:::::{.my-watch}\n:::{.my-watch-header}\nIs the chapter outdated because of {bslib}?\n:::\n::::{.my-watch-container}\nI am not sure if the following explanations are still the best\nway to create layouts for Shiny. It seems to me, that with the\n{**bslib**}[^06-layouts-1] package a more modern toolkit based on\n[Bootstrap](https://getbootstrap.com/) is now available.\n\n{**bslib**} has several advantages:\n\n- It is designed not only to work for Shiny but also for other contexts, like R Markdown.\n- It provides [custom theming](https://rstudio.github.io/bslib/articles/theming/index.html), even interactively in real-time.\n- It uses newer versions of <a class='glossary' title='Bootstrap is a free and open-source CSS framework designed for responsive, mobile-first front-end web development. The framework provides HTML, CSS, and JavaScript-based design templates for various interface components such as typography, forms, buttons, navigation, and more. It aims to simplify the process of creating responsive and mobile-friendly websites by offering pre-styled components and a grid system.'>Bootstrap</a> and <a class='glossary' title='Bootswatch is a collection of themes for Bootstrap. It provides pre-built themes that can be easily applied to a Bootstrap project, simplifying the process of achieving a polished and professional look.'>Bootswatch</a>, whereas Shiny and <a class='glossary' title='R Markdown is a file format for creating dynamic documents that combine text written in markdown with chunks of embedded R code. This allows users to weave together narrative text and code to produce elegantly formatted output, such as HTML, PDF, or Microsoft Word documents, among others.'>R Markdown</a> currently default to Bootstrap 3 and may continue to do so to maintain backwards compatibility.\n\n[^06-layouts-1]: Therefore the name: bslib is an acronym for\n    **b**oot**s**trap **lib**rary.\n::::\n:::::\n\n\n\n\n    \n\n    \n:::::{.my-resource}\n:::{.my-resource-header}\n:::::: {#lem-06-bslib-layout-design}\n: {bslib} layout design\n::::::\n:::\n::::{.my-resource-container}\n\n- {**bslib**} [package documentation](https://rstudio.github.io/bslib/index.html) for custom bootstrap <a class='glossary' title='SASS (Syntactically Awesome Style Sheets) is a CSS preprocessor that extends CSS with additional features to make styling easier and more efficient. Some key extensions include variables, nesting, and mixins. Variables allow you to store values like colors and fonts, making it easier to update styles across your stylesheet. Nesting enables you to write CSS selectors in a hierarchical manner, similar to HTML structure, reducing redundancy. Mixins let you define reusable blocks of CSS properties. Additionally, SASS supports functions and modules, which help organize and manage complex stylesheets more effectively. SCSS, short for Sassy CSS, is the main syntax used in SASS and is a superset of CSS, meaning all valid CSS is also valid SCSS. It uses the .scss file extension and includes all the features mentioned above.'>SASS</a> themes for Shiny and R Markdown\n- New Shiny [application layout guide](https://shiny.posit.co/r/articles/build/layout-guide/) based on {**bslib**}\n- [Bootstrap](https://getbootstrap.com/) is a free and open-source CSS framework designed for responsive, mobile-first front-end web development.\n- [Bootswatch](https://bootswatch.com/) is a collection of pre-built themes that can be easily applied to a Bootstrap project, simplifying the process of achieving a polished and professional look.\n\n:::\n:::::\n\n\n## Single page layout\n\nLayout functions provide the high-level visual structure of an app.\nLayouts are created by a hierarchy of function calls, where the\nhierarchy in R matches the hierarchy in the generated HTML. This helps\nyou understand layout code.\n\n:::::: my-r-code\n:::: my-r-code-header\n::: {#cnj-06-single-page-layout}\n: Single page layout\n:::\n::::\n\n::: my-r-code-container\n```{shinylive-r}\n#| standalone: true\n#| viewerHeight: 400\n#| components: [editor, viewer]\n\nui <- fluidPage(\n  titlePanel(\"Hello Shiny!\"),\n  sidebarLayout(\n    sidebarPanel(\n      sliderInput(\"obs\", \"Observations:\", min = 0, max = 1000, value = 500)\n    ),\n    mainPanel(\n      plotOutput(\"distPlot\")\n    )\n  )\n)\n\nserver <- function(input, output, session) {\n\n}\n\nshinyApp(ui, server)\n```\n:::\n::::::\n\n### Page functions\n\nThe most important, but least interesting, layout function is\n`fluidPage()`, which you’ve seen in pretty much every example so far.\nBut what’s it doing and what happens if you use it by itself? Figure 6.1\nshows the results: it looks like a very boring app but there’s a lot\ngoing behind the scenes, because `fluidPage()` sets up all the HTML,\nCSS, and JavaScript that Shiny needs.\n\n:::::: my-r-code\n:::: my-r-code-header\n::: {#cnj-06-fluid-page}\n: An UI consisting just of `fluidPage()`\n:::\n::::\n\n::: my-r-code-container\n```{shinylive-r}\n#| standalone: true\n#| components: [editor, viewer]\n\n\nui <- fluidPage()\n\nserver <- function(input, output, session) {}\n\nshinyApp(ui, server)\n```\n:::\n::::::\n\nIn addition to `fluidPage()`, Shiny provides a couple of other page\nfunctions that can come in handy in more specialized situations:\n`fixedPage()` and `fillPage()`.\n\n-   `fixedPage()` works like `fluidPage()` but has a fixed maximum\n    width, which stops your apps from becoming unreasonably wide on\n    bigger screens.\n-   `fillPage()` fills the full height of the browser and is useful if\n    you want to make a plot that occupies the whole screen.\n\n:::::: my-resource\n:::: my-resource-header\n::: {#lem-06-fluid-page}\n: Page functions\n:::\n::::\n\n::: my-resource-container\n-   [fluidPage()](https://shiny.posit.co/r/reference/shiny/latest/fluidpage.html):\n    Create a page with fluid layout.\n-   [fixedPage()](https://shiny.posit.co/r/reference/shiny/latest/fixedpage.html):\n    Create a page with a fixed layout.\n-   [fillPage()](https://shiny.posit.co/r/reference/shiny/latest/fillpage.html):\n    Create a page that fills the window.\n:::\n::::::\n\n### Page with sidebar\n\nTo make more complex layouts, you’ll need call layout functions inside\nof `fluidPage()`. For example, to make a two-column layout with inputs\non the left and outputs on the right you can use `sidebarLayout()`\n(along with its friends `titlePanel()`, `sidebarPanel()`, and\n`mainPanel()`).\n\n:::::: my-resource\n:::: my-resource-header\n::: {#lem-06-page-with-sidebar}\n: Sidebar functions\n:::\n::::\n\n::: my-resource-container\n-   [sidebarLayout()](https://shiny.posit.co/r/reference/shiny/latest/sidebarlayout.html):\n    Layout a sidebar and main area. Create a layout (`sidebarLayout()`)\n    with a sidebar (`sidebarPanel()`) and main area (`mainPanel()`)\n-   [titlePanel()](https://shiny.posit.co/r/reference/shiny/latest/titlepanel.html):\n    Create a panel containing an application title.\n:::\n::::::\n\n![Structure of a page with\nsidebar](https://mastering-shiny.org/diagrams/action-layout/sidebar.png){#fig-06-01\nfig-alt=\"alt-text\" fig-align=\"center\" width=\"70%\"}\n\n::::::::::::::::: column-body-outset\n:::::::::::::::: my-code-collection\n::::: my-code-collection-header\n::: my-code-collection-icon\n:::\n\n::: {#exm-06-page-sidebar}\n: Page with sidebar layout\n:::\n:::::\n\n:::::::::::: my-code-collection-container\n::::::::::: panel-tabset\n###### Empty Layout\n\n:::::: my-r-code\n:::: my-r-code-header\n::: {#cnj-06-page-sidebar-empty}\n: Page with sidebar\n:::\n::::\n\n::: my-r-code-container\n```{shinylive-r}\n#| standalone: true\n#| viewerHeight: 200\n#| components: [editor, viewer]\n#| layout: vertical\n\n# Define UI\nui <- fluidPage(\n\n    titlePanel(\"Hello Shiny!\"),\n\n    sidebarLayout(\n        sidebarPanel(\"sidebarPanel\"),\n        mainPanel(\"mainPanel\")\n    )\n)\n\n# Server logic\nserver <- function(input, output) {}\n\n# Complete app with UI and server components\nshinyApp(ui, server)\n\n```\n\n------------------------------------------------------------------------\n\nI had to choose a slightly wider page width. Otherwise Shiny would have\nstacked the two panels.\n:::\n::::::\n\n###### Example\n\n:::::: my-r-code\n:::: my-r-code-header\n::: {#cnj-06-page-sidebar-example}\n: Layout example: Page with sidebar\n:::\n::::\n\n::: my-r-code-container\n```{shinylive-r}\n#| standalone: true\n#| viewerHeight: 500\n#| components: [editor, viewer]\n#| layout: vertical\n\n\nui <- fluidPage(\n  titlePanel(\"Central limit theorem\"),\n  sidebarLayout(\n    sidebarPanel(\n      numericInput(\"m\", \"Number of samples: (1-100)\", 2, min = 1, max = 100),\n      \"Increase the number of samples to see the distribution become more normal.\"\n    ),\n    mainPanel(\n      plotOutput(\"hist\")\n    )\n  )\n)\nserver <- function(input, output, session) {\n  output$hist <- renderPlot({\n    req(\"m\")\n    means <- replicate(1e4, mean(runif(input$m)))\n    hist(means, breaks = 20)\n  }, res = 96)\n}\n\nshinyApp(ui, server)\n```\n\n------------------------------------------------------------------------\n\nRendering the app (or reloading the web page) results for a moment with\nthe error message \"figure margins too large\". I do not know why this\nhappens and how to prevent it.\n:::\n::::::\n:::::::::::\n::::::::::::\n::::::::::::::::\n:::::::::::::::::\n\n### Multi-row\n\nUnder the hood, `sidebarLayout()` is built on top of a flexible\nmulti-row layout, which you can use directly to create more visually\ncomplex apps. As usual, you start with `fluidPage()`. Then you create\nrows with `fluidRow()`, and columns with `column()`.\n\n:::::: my-resource\n:::: my-resource-header\n::: {#lem-06-multi-row-layout}\n: Multi-row functions\n:::\n::::\n\n::: my-resource-container\n\nA fluid page layout consists of rows which in turn include columns.\n\n-   [fluidRow()](https://shiny.posit.co/r/reference/shiny/latest/fluidpage.html): Rows exist for the purpose of making sure their elements appear on the same line (if the browser has adequate width).\n-   [column()](https://shiny.posit.co/r/reference/shiny/latest/column.html): Columns exist for the purpose of defining how much horizontal space within a 12-unit wide grid it's elements should occupy.\n:::\n::::::\n\n\nEach row is made up of 12 columns and the first argument to `column()` gives how many of those columns to occupy. A 12 column layout gives you substantial flexibility because you can easily create 2-, 3-, or 4-column layouts, or use narrow columns to create spacers. You can see an example of this layout in @XXX_4.4.\n\nIf you’d like to learn more about designing using a grid system, I highly recommend the classic text on the subject: “Grid systems in graphic design” by Josef Müller-Brockman [-@mueller-brockmann-1998].\n\n\n![The structure underlying a simple multi-row app](https://mastering-shiny.org/diagrams/action-layout/multirow.png){#fig-06-02\nfig-alt=\"alt-text\" fig-align=\"center\" \nwidth=\"70%\"}\n\n### Exercises\n\n#### `sidebarLayout()`\n\nRead the documentation of `sidebarLayout()` to determine the width (in columns) of the sidebar and the main panel. Can you recreate its appearance using `fluidRow()` and `column()`? What are you missing?\n\n::: column-body-outset\n\n:::::{.my-exercise}\n:::{.my-exercise-header}\n:::::: {#exr-06-ex-01-sidebarlayout}\n: `sidebarLayout()`\n::::::\n:::\n::::{.my-exercise-container}\n\nThe `sidbarbarPanel()` has a width of 4 columns and the `mainPanel()` is eight columns wide. The 12 column grid of the standard page is divided 1/3 (controls) : 2/3 (output).\n\n\n\n\n```{shinylive-r}\n#| standalone: true\n#| viewerHeight: 100\n#| components: [editor, viewer]\n#| layout: vertical\n\nui <- fluidPage(\n  fluidRow(\n    column(\n      width = 4, \n      \"place for the controls: 4 columns\"\n      ),\n    column(\n      width = 8, \n      \"place for the output: 8 columns\"\n    )\n  )\n\n)\n\nserver <- function(input, output, session) {\n\n}\n\nshinyApp(ui, server)\n```\n\n***\n\nMissing is the `titlePanel()`.\n::::\n:::::\n\n\n\n\n#### Change panel positions\n\nModify the Central Limit Theorem app from @exm-06-page-sidebar to put the sidebar on the right instead of the left.\n\n:::::{.my-exercise}\n:::{.my-exercise-header}\n:::::: {#exr-sidebar-right}\n: Central Limit Theorem with the sidebar on the right\n::::::\n:::\n::::{.my-exercise-container}\n\n```{shinylive-r}\n#| standalone: true\n#| viewerHeight: 500\n#| components: [editor, viewer]\n#| layout: vertical\n\nui <- fluidPage(\n  titlePanel(\"Central limit theorem\"),\n  sidebarLayout(\n    sidebarPanel(\n      numericInput(\"m\", \"Number of samples: (1-100)\", 2, min = 1, max = 100),\n      \"Increase the number of samples to see the distribution become more normal.\"\n    ),\n    mainPanel(\n      plotOutput(\"hist\")\n    ),\n    position = \"right\"\n  )\n)\nserver <- function(input, output, session) {\n  output$hist <- renderPlot({\n    req(\"m\")\n    means <- replicate(1e4, mean(runif(input$m)))\n    hist(means, breaks = 20)\n  }, res = 96)\n}\n\nshinyApp(ui, server)\n```\n\n::::\n:::::\n\n\n\n#### Stacked `sidebarLayout()`\n\n\n:::::{.my-exercise}\n:::{.my-exercise-header}\n:::::: {#exr-06-ex-03}\n: Main panel divided 50:50 with sidebar below\n::::::\n:::\n::::{.my-exercise-container}\n\n\n```{shinylive-r}\n#| standalone: true\n#| viewerHeight: 500\n#| components: [editor, viewer]\n#| layout: vertical\n\nui <- fluidPage(\n  title = \"Central limit theorem\",\n  fluidRow(\n    column(width = 6, \n           plotOutput(\"hist1\")\n           ),\n    column(width = 6,\n           plotOutput(\"hist2\")\n           ),\n  ),\n  fluidRow(\n    column(width = 6,\n           numericInput(\"m1\", \"Number of samples: (1-100)\", 2, min = 1, max = 100)\n           ),\n    column(width = 6,\n           numericInput(\"m2\", \"Number of samples: (1-100)\", 2, min = 1, max = 100)\n           )\n  )\n)\n\n\nserver <- function(input, output, session) {\n  output$hist1 <- renderPlot({\n    means <- replicate(1e4, mean(runif(input$m1)))\n    hist(means, breaks = 20)\n  }, res = 96)\n  \n  output$hist2 <- renderPlot({\n    means <- replicate(1e4, mean(runif(input$m2)))\n    hist(means, breaks = 20)\n  }, res = 96)\n}\n\nshinyApp(ui, server)\n```\n\n\n\n::::\n:::::\n\n:::\n\n## Multi-page layout\n\nAs your app grows in complexity, it might become impossible to fit everything on a single page. In this section you’ll learn various uses of `tabPanel()` that create the illusion of multiple pages. This is an illusion because you’ll still have a single app with a single underlying HTML file, but it’s now broken into pieces and only one piece is visible at a time.\n\nMulti-page apps pair particularly well with modules, which you’ll learn about in @XXX_19. Shiny modules allow you to partition up the server function in the same way you partition up the user interface, creating independent components that only interact through well defined connections.\n\n### Tabsets\n\nThe simple way to break up a page into pieces is to use `tabsetPanel()` and its close friend `tabPanel()`. As you can see in the code below, `tabsetPanel()` creates a container for any number of `tabPanels()`, which can in turn contain any other HTML components.\n\n`tabsetPanel()` can be used anywhere in your app; it’s totally fine to nest tabsets inside of other components (including tabsets!) if needed.\n\n::: {.my-code-collection}\n:::: {.my-code-collection-header}\n::::: {.my-code-collection-icon}\n:::::\n:::::: {#exm-06-tabsets}\n: Using tabsets: `tabsetPanel()` and `tabPanels()`\n::::::\n\n::::\n\n::::{.my-code-collection-container}\n\n::: {.panel-tabset}\n\n###### Simple example\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-tabset-simple-example}\n: A simple tabset example\n::::::\n:::\n::::{.my-r-code-container}\n\n\n```{shinylive-r}\n#| standalone: true\n#| viewerHeight: 400\n#| components: [editor, viewer]\n#| layout: vertical\n\nui <- fluidPage(\n  tabsetPanel(\n    tabPanel(\"Data\", \n      fileInput(\"file\", \"Data\", buttonLabel = \"Upload...\"),\n      textInput(\"delim\", \"Delimiter (leave blank to guess)\", \"\"),\n      numericInput(\"skip\", \"Rows to skip\", 0, min = 0),\n      numericInput(\"rows\", \"Rows to preview\", 10, min = 1)\n    ),\n    tabPanel(\"Parameters\"),\n    tabPanel(\"Results\")\n  )\n)\n\nserver <- function(input, output, session) {}\n\nshinyApp(ui, server)\n```\n\n\n\n\n\n::::\n:::::\n\n\n###### With ID\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-06-tabset-with-id}\n: Tabset with location detection (via ID)\n::::::\n:::\n::::{.my-r-code-container}\n```{shinylive-r}\n#| standalone: true\n#| viewerHeight: 200\n#| components: [editor, viewer]\n#| layout: vertical\n\nui <- fluidPage(\n  sidebarLayout(\n    sidebarPanel(\n      textOutput(\"panel\")\n    ),\n    mainPanel(\n      tabsetPanel(\n        id = \"tabset\",\n        tabPanel(\"panel 1\", \"one\"),\n        tabPanel(\"panel 2\", \"two\"),\n        tabPanel(\"panel 3\", \"three\")\n      )\n    )\n  )\n)\n\n\nserver <- function(input, output, session) {\n  output$panel <- renderText({\n    paste(\"Current panel: \", input$tabset)\n  })\n}\n\n\nshinyApp(ui, server)\n```\n\n::::\n:::::\n\n:::\n\n::::\n:::::\n\n\n\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-06-tabsets}\n: Using tabsets\n::::::\n:::\n::::{.my-r-code-container}\n\n\n\n::::\n:::::\n\n\n### Navlist and navbars\n\nBecause tabs are displayed horizontally, there’s a fundamental limit to how many tabs you can use, particularly if they have long titles. `navbarPage()` and `navbarMenu()` provide two alternative layouts that let you use more tabs with longer titles.\n\n`navlistPanel()` is similar to `tabsetPanel()` but instead of running the tab titles horizontally, it shows them vertically in a sidebar. It also allows you to add headings with plain strings, as shown in the code below.\n\nAnother approach is the use of `navbarPage()`: it still runs the tab titles horizontally, but you can use `navbarMenu()` to add drop-down menus for an additional level of hierarchy.\n\n::: {.my-code-collection}\n:::: {.my-code-collection-header}\n::::: {.my-code-collection-icon}\n:::::\n:::::: {#exm-06-navbar}\n: Navlist and navbars\n::::::\n\n::::\n\n::::{.my-code-collection-container}\n\n::: {.panel-tabset}\n\n###### `navlistPanel()`\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-06-navlist-panel}\n: `navlistPanel()`: Tabs horizontally\n::::::\n:::\n::::{.my-r-code-container}\n\n```{shinylive-r}\n#| standalone: true\n#| viewerHeight: 400\n#| components: [editor, viewer]\n\nlibrary(shiny)\n\nui <- fluidPage(\n  navlistPanel(\n    id = \"tabset\",\n    \"Heading 1\",\n    tabPanel(\"panel 1\", \"Panel one contents\"),\n    \"Heading 2\",\n    tabPanel(\"panel 2\", \"Panel two contents\"),\n    tabPanel(\"panel 3\", \"Panel three contents\")\n  )\n)\n\nserver <- function(input, output, session) {\n\n}\n\nshinyApp(ui, server)\n```\n\n\n::::\n:::::\n\n\n###### navbarPage()\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-06-navbar-page}\n: `navbarPage()` with `navbarMenu()` for submenues\n::::::\n:::\n::::{.my-r-code-container}\n\n```{shinylive-r}\n#| standalone: true\n#| viewerHeight: 400\n#| components: [editor, viewer]\n\nlibrary(shiny)\n\nui <- navbarPage(\n  \"Page title\",   \n  tabPanel(\"panel 1\", \"one\"),\n  tabPanel(\"panel 2\", \"two\"),\n  tabPanel(\"panel 3\", \"three\"),\n  navbarMenu(\"subpanels\", \n    tabPanel(\"panel 4a\", \"four-a\"),\n    tabPanel(\"panel 4b\", \"four-b\"),\n    tabPanel(\"panel 4c\", \"four-c\")\n  )\n)\n\nserver <- function(input, output, session) {\n\n}\n\nshinyApp(ui, server)\n```\n\n\n::::\n:::::\n\n:::\n\n::::\n:::::\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}