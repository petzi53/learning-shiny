{
  "hash": "82f2d4c66a9662e2c9310cf8be2d3612",
  "result": {
    "engine": "knitr",
    "markdown": "---\nformat: \n  live-html:\n    page-layout: article\n    grid: \n      margin-width: 450px\n      body-width: 2000px\nengine: knitr\nwebr:\n  packages: ['shiny']\n---\n\n\n::: {.cell}\n\n:::\n\n\n\n# Test Quarto Live {#sec-chap07}\n\n\n\n\n## Table of content for chapter 07 {.unnumbered}\n\n::::: {#obj-chap05}\n:::: {.my-objectives}\n::: {.my-objectives-header}\nChapter section list\n:::\n\n::: {.my-objectives-container}\n\n\n:::\n::::\n:::::\n\n## Standard Block\n\n\n::: {.cell}\n```{webr}\nfor (x in 1:5) {\n  print(x ** 2)\n}\n```\n:::\n\n\n## Read only\n\n\n::: {.cell edit='false'}\n```{webr}\n#| edit: false\ndf <- data.frame(foo = c(1, 2, 3), bar = c(10, 20, 30))\ndf$foo\ndf$bar\n```\n:::\n\n\n## Autorun\n\n\n::: {.cell autorun='true'}\n```{webr}\n#| autorun: true\n123 + 456\n```\n:::\n\n\n## Immediate execution\n\n\n::: {.cell caption='Immediate Execution' autorun='true' runbutton='false'}\n```{webr}\n#| caption: Immediate Execution\n#| autorun: true\n#| runbutton: false\nfoo <- 123\nbar <- 246\nfoo + bar\n```\n:::\n\n\n## Autocomplete\n\n\n::: {.cell autorun='true' completion='true'}\n```{webr}\n#| autorun: true\n#| completion: true\nn_mean <- 120\nn_sd <- 5\n\n# Type \"n_\" to see context aware suggestions\n```\n:::\n\n\n## Execution without output\n\n\n::: {.cell}\n```{webr}\n#| include: false\n123\n456\ninclude_false_n <- 789\n```\n:::\n\n\n\n::: {.cell}\n```{webr}\nprint(include_false_n)\n```\n:::\n\n\n## Storing & recalling code\n\n\n::: {.cell startover='false'}\n```{webr}\n#| startover: false\nfoo <- c(2, 4, 6, 8)\nfoo + 1\n```\n:::\n\n\n````markdown\n```{{webr}}\n#| persist: true\nfoo <- c(1, 3, 5, 7)\nfoo + 1\n```\n````\n\n\n\n::: {.cell persist='true'}\n```{webr}\n#| persist: true\nfoo <- c(1, 3, 5, 7)\nfoo + 1\n```\n:::\n\n\n## Execuation Time Limit\n\n````markdown\n```{{webr}}\n#| timelimit: 2\nwhile (TRUE) {\n  # Loop, infinitely\n}\n```\n````\n\n\n::: {.cell timelimit='2'}\n```{webr}\n#| timelimit: 2\nwhile (TRUE) {\n  # Loop, infinitely\n    print(\"*\")\n    Sys.sleep(0.5)\n}\n```\n:::\n\n\n## Editor height\n\n````markdown\n```{{webr}}\n#| min-lines: 6\n#| max-lines: 10\nx <- 173\n\ny <- 205\n\nx + y\n```\n````\n\n\n\n::: {.cell min-lines='6' max-lines='10'}\n```{webr}\n#| min-lines: 6\n#| max-lines: 10\nx <- 173\n\ny <- 205\n\nx + y\n```\n:::\n\n\n\n## Cross references\n\n::: {#lst-ref}\n\n\n::: {.cell}\n```{webr}\nmod <- lm(mpg ~ cyl, data = mtcars)\nsummary(mod)\n```\n:::\n\n\nAn interactive R code block, with an example of fitting a linear model.\n\n:::\n\nSee @lst-ref for details.\n\n## shinylive code chunk\n\n```{shinylive-r}\n#| standalone: true\n#| viewerHeight: 400\n\nlibrary(shiny)\n\nui <- fluidPage(\n    textInput(\"name\", \"What's your name?\"),\n    textOutput(\"greeting\")\n)\n\nserver <- function(input, output, session) {\n    output$greeting <- renderText({\n        paste0(\"Hello \", input$name)\n    })\n}\n\nshinyApp(ui, server)\n\n```\n\n## shiny with webr\n\n\n::: {.cell}\n```{webr}\n\n#\n# This is a Shiny web application. You can run the application by clicking\n# the 'Run App' button above.\n#\n# Find out more about building applications with Shiny here:\n#\n#    https://shiny.posit.co/\n#\n\nlibrary(shiny)\n\n# Define UI for application that draws a histogram\nui <- fluidPage(\n\n    # Application title\n    titlePanel(\"Old Faithful Geyser Data\"),\n\n    # Sidebar with a slider input for number of bins\n    sidebarLayout(\n        sidebarPanel(\n            sliderInput(\"bins\",\n                        \"Number of bins:\",\n                        min = 1,\n                        max = 50,\n                        value = 30)\n        ),\n\n        # Show a plot of the generated distribution\n        mainPanel(\n           plotOutput(\"distPlot\")\n        )\n    )\n)\n\n# Define server logic required to draw a histogram\nserver <- function(input, output) {\n\n    output$distPlot <- renderPlot({\n        # generate bins based on input$bins from ui.R\n        x    <- faithful[, 2]\n        bins <- seq(min(x), max(x), length.out = input$bins + 1)\n\n        # draw the histogram with the specified number of bins\n        hist(x, breaks = bins, col = 'darkgray', border = 'white',\n             xlab = 'Waiting time to next eruption (in mins)',\n             main = 'Histogram of waiting times')\n    })\n}\n\n# Run the application\nshinyApp(ui = ui, server = server)\n\n```\n:::\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}