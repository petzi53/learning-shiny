{
  "hash": "c401f1fbe224b29bd2df1190897ba942",
  "result": {
    "engine": "knitr",
    "markdown": "# Packages used {#sec-annex-package-used}\n\n\n\n## dplyr {#sec-96-dplyr}\n\n:::::: my-num-packagebox\n::: my-num-packagebox-header\nPackage Profile: dplyr\n:::\n\n------------------------------------------------------------------------\n\n:::: my-num-packagebox-container\n<center>[A Grammar of Data Manipulation](https://dplyr.tidyverse.org/) [@dplyr]</center>\n\n------------------------------------------------------------------------\n\n::: {layout=\"[10, 30]\" layout-valign=\"center\"}\n![](img/logoi/logo-dplyr-min.png){width=\"176\"}\n\nA fast, consistent tool for working with data frame like objects, both in memory and out of memory. {**dplyr**} is a grammar of data manipulation, providing a consistent set of verbs that help you solve the most common data manipulation challenges: \n\n:::\n\n------------------------------------------------------------------------\n\n- `dplyr::mutate()` adds new variables that are functions of existing variables \n- `dplyr::select()` picks variables based on their names.\n- `dplyr::filter()` picks cases based on their values. \n- `dplyr::slice()`  subsets rows using their positions.\n- `dplyr::summarise()` reduces multiple values down to a single summary. \n- `dplyr::arrange()` changes the ordering of the rows.\n\n::::\n::::::\n\n\n## s2 {#sec-96-s2}\n\n:::::: my-num-packagebox\n::: my-num-packagebox-header\nPackage Profile: S2\n:::\n\n------------------------------------------------------------------------\n\n:::: my-num-packagebox-container\n<center>[Spherical Geometry Operators Using the S2 Geometry Library](https://r-spatial.github.io/s2/) [@s2]</center>\n\n------------------------------------------------------------------------\n\n<center>(*There is no hexagon sticker available for {**S2**}.*)</center>  \n\nProvides R bindings for Google's s2 library for geometric calculations on the sphere. High-performance constructors and exporters provide high compatibility with existing spatial packages, transformers construct new geometries from existing geometries, predicates provide a means to select geometries based on spatial relationships, and accessors extract information about geometries.\n\n S2 is perhaps best known as an example of a Discrete Global Grid System (<a class='glossary' title='A Discrete Global Grid System (DGGS) is a method of dividing the Earth’s surface into a mosaic of cells, each with a unique identifier. This system simplifies spatial calculations and allows for hierarchical organization, where each cell can contain smaller cells, creating a grid with progressively finer resolution.'>DGGS</a>)\n\n------------------------------------------------------------------------\n\n:::::{.my-resource}\n:::{.my-resource-header}\nOther S2 resources\n:::\n::::{.my-resource-container}\n\n- [Welcome to the S2 Geometry Library!](http://s2geometry.io/)\n- {**sf**}-vignette [7. Spherical geometry in sf using s2geometry](https://r-spatial.github.io/sf/articles/sf7.html)\n- [Geometry on the Sphere: Google's S2 Library](https://docs.google.com/presentation/d/1Hl4KapfAENAOf4gv-pSngKwvS_jwNVHRPZTTDzXXn6Q/edit#slide=id.i143): Slides\n::::\n:::::\n\n\n::::\n::::::\n\n## sf {#sec-96-sf}\n\n:::::: my-num-packagebox\n::: my-num-packagebox-header\nPackage Profile: sf\n:::\n\n------------------------------------------------------------------------\n\n:::: my-num-packagebox-container\n<center>[Simple Features for R](https://r-spatial.github.io/sf/) [@sf]</center>\n\n------------------------------------------------------------------------\n\n::: {layout=\"[10, 30]\" layout-valign=\"center\"}\n![](img/logoi/logo-sf-min.png){width=\"176\"}\n\nSupport for simple features, a standardized way to encode spatial vector data. Binds to 'GDAL' for reading and writing data, to 'GEOS' for geometrical operations, and to 'PROJ' for projection conversions and datum transformations. Uses by default the 's2' package for spherical geometry operations on ellipsoidal (long/lat) coordinates.\n:::\n\n------------------------------------------------------------------------\n\n::: {#nte-importance-sf .callout-note}\n###### {**sf**} is now the go-to package for analysis of spatial vector data in R\n\n**Simple feature objects in R are stored in a data frame, with geographic\ndata occupying a special column, usually named ‘geom’ or ‘geometry’.\nSimple features are, in essence, data frames with a spatial extension.**\n\n:::\n\n{**sf**} provides the same functionality (and more) previously provided\nin three (now deprecated) packages:\n\n-   {**sp**} for data classes\n-   {**rgdal**} for data read/write via an interface to GDAL and PROJ\n    and\n-   {**rgeos**} for spatial operations via an interface to GEOS.\n\n:::::{.my-resource}\n:::{.my-resource-header}\n:::::: {#lem-02-sf-documentation}\n: {**sf**} documentation\n::::::\n:::\n::::{.my-resource-container}\nsf’s functionality is well documented on its website at\n[r-spatial.github.io/sf/](https://r-spatial.github.io/sf/) which contains [seven\nvignettes](https://r-spatial.github.io/sf/articles/).\n\n1. [Simple Features for R](https://r-spatial.github.io/sf/articles/sf1.html)\n2. [Reading, Writing and Converting Simple Features](https://r-spatial.github.io/sf/articles/sf2.html)\n3. [Manipulating Simple Feature Geometries](https://r-spatial.github.io/sf/articles/sf3.html)\n4. [Manipulating Simple Features](https://r-spatial.github.io/sf/articles/sf4.html)\n5. [Plotting Simple Features](https://r-spatial.github.io/sf/articles/sf5.html)\n6. [Miscellaneous](https://r-spatial.github.io/sf/articles/sf6.html)\n7. [Spherical geometry in sf using s2geometry](https://r-spatial.github.io/sf/articles/sf1.html)\n::::\n:::::\n\n\n\n\nMost of the book notes are a tutorial how to use the {**sf**} package. I will therefore abstain here from additonal comments.\n::::\n::::::\n\n\n\n## sfheaders {#sec-96-sfheaders}\n\n:::::: my-num-packagebox\n::: my-num-packagebox-header\nPackage Profile: sfheaders\n:::\n\n:::: my-num-packagebox-container\n\n***\n\n<center>[Converts Between R Objects and Simple Feature Objects](https://dcooley.github.io/sfheaders/index.html) [@sfheaders]</center>\n\n------------------------------------------------------------------------\n\n<center>(*There is no hexagon sticker available for {**sfheaders**}.*)</center>    \n\n\nConverts between R and Simple Feature `sf` objects, without depending on the ‘heavy’ Simple Feature library. Conversion functions are available at both the R level, and through {**Rcpp**}.\n\n::::\n::::::\n\n## stars {#sec-96-stars}\n\n:::::: my-num-packagebox\n::: my-num-packagebox-header\nPackage Profile: stars\n:::\n\n------------------------------------------------------------------------\n\n:::: my-num-packagebox-container\n<center>[Spatiotemporal Arrays, Raster and Vector Data Cubes](\thttps://r-spatial.github.io/stars/) [@stars]</center>\n\n------------------------------------------------------------------------\n\n<center>(*There is no hexagon sticker available for {**Package**}.*)</center>  \n\n\nReading, manipulating, writing and plotting spatiotemporal arrays (raster and vector data cubes) in 'R', using <a class='glossary' title='The Geospatial Data Abstraction Library (GDAL) is a computer software library for reading and writing raster and vector geospatial data formats (e.g. shapefile), and is released under the permissive X/MIT style free software license by the Open Source Geospatial Foundation. As a library, it presents a single abstract data model to the calling application for all supported formats. (Wikipedia)'>GDAL</a> bindings provided by {**sf**}, and <a class='glossary' title='NetCDF, which stands for Network Common Data Form, is a set of software libraries and self-describing, machine-independent data formats designed for storing and retrieving array-oriented scientific data. It allows users to access data directly without needing to know the details of how the data is stored. NetCDF files contain metadata that describes the data they hold, making them portable across different computing platforms. Developed and maintained by the Unidata Program Center, a part of the University Corporation for Atmospheric Research (UCAR), NetCDF supports various programming languages including C, C++, Java, Fortran, Python, IDL, MATLAB, R, Ruby, and Perl.'>NetCDF</a> bindings by {**ncmeta**} and {**RNetCDF**}.\n\n------------------------------------------------------------------------\n\nRead [@pebesma-2023] to learn more about {**stars**}.\n::::\n::::::\n\n\n## terra {#sec-96-terra}\n\n:::::: my-num-packagebox\n::: my-num-packagebox-header\nPackage Profile: terra\n:::\n\n------------------------------------------------------------------------\n\n:::: my-num-packagebox-container\n<center>[Spatial Data Analysis](https://rspatial.github.io/terra/) [@terra]</center>\n\n------------------------------------------------------------------------\n\n::: {layout=\"[10, 30]\" layout-valign=\"center\"}\n![](img/logoi/logo-terra-min.png){width=\"176\"}\n\nMethods for spatial data analysis with vector (points, lines, polygons) and raster (grid) data. Methods for vector data include geometric operations such as intersect and buffer. Raster methods include local, focal, global, zonal and geometric operations. The predict and interpolate methods facilitate the use of regression type (interpolation, machine learning) models for spatial prediction, including with satellite remote sensing data. Processing of very large files is supported. \n:::\n\n------------------------------------------------------------------------\n\n::: {.callout-note }\n{**terra**} replaces the {**raster**} package ({**terra**} can do more, and it is faster and easier to use).\n:::\n\n\n- See the manual and tutorials on [https://rspatial.org/](https://rspatial.org/) to get started. \n- Read additionally information about {**terra**} from the package author [@hijmans-2023; @hijmans-2025].\n::::\n::::::\n\n## units {#sec-96-units}\n\n:::::: my-num-packagebox\n::: my-num-packagebox-header\nPackage Profile: units\n:::\n\n------------------------------------------------------------------------\n\n:::: my-num-packagebox-container\n<center>[Measurement Units for R Vectors](\thttps://r-quantities.github.io/units/) [@units]</center>\n\n------------------------------------------------------------------------\n\n<center>(*There is no hexagon sticker available for {**units**}.*)</center>  \n\nSupport for measurement units in R vectors, matrices and arrays: automatic propagation, conversion, derivation and simplification of units; raising errors in case of unit incompatibility. Compatible with the POSIXct, Date and difftime classes. Uses the UNIDATA udunits library and unit database for unit compatibility checking and conversion. Documentation about 'units' is provided in the paper by [@pebesma-2016] included as [package vignette](https://r-quantities.github.io/units/).\n\n------------------------------------------------------------------------\n\n::::\n::::::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}