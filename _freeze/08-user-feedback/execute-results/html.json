{
  "hash": "c2508f96321551de249c78985565855a",
  "result": {
    "engine": "knitr",
    "markdown": "# User Feedback {#sec-chap08}\n\n\n\n\n::::: {#obj-chap08}\n:::: {.my-objectives}\n::: {.my-objectives-header}\nChapter section list\n:::\n\n::: {.my-objectives-container}\n\n- **Validation**, informing the user when an input (or combination of inputs) is in an invalid state. \n- **Notification**, sending general messages to the user, and progress bars, which give details for time consuming operations made up of many small steps.\n- **Confirmation** dialogs or the ability to undo an action to give users peace of mind in dangerous situations. \n\n\n:::\n::::\n:::::\n\n:::::{.my-resource}\n:::{.my-resource-header}\n:::::: {#lem-08-packages}\n: Packages used in this chapter\n::::::\n:::\n::::{.my-resource-container}\n- {**shinyFeedback**}, by Andy Merlin [@shinyFeedback]\n- {**waiter**}, by John Coene  [@waiter]\n- {**shinyvalidate**}, by Joe Cheng [@shinyvalidate]\n\n::::\n:::::\n\n## Validation\n\n### Validating input {#sec-08-validating-input}\n\nUsing {**shinyFeedback**} is a two step process. \n\n1. First, you add shinyFeedback::useShinyFeedback() to the UI. This sets up the needed HTML and JavaScript for attractive error message display.\n2. Then in your `shiny::server()` function, you call one of the feedback functions: \n- `feedback()`, \n- `feedbackWarning()`, \n- `feedbackDanger()`, and \n- `feedbackSuccess()`. \n\nThey all have six arguments, where the first three are essential and the last one (session) is for advanced usage.\n\n- `inputId`, the id of the input where the feedback should be placed.\n- `show`, a logical determining whether or not to show the feedback.\n- `text`, the text to display.\n- `color`, the color of the feedback and \n- `icon`, an html icon tag.\n\n\n::: {.column-page-inset}\n\n::: {.my-code-collection}\n:::: {.my-code-collection-header}\n::::: {.my-code-collection-icon}\n:::::\n:::::: {#exm-08-validate-input}\n: Validating input\n::::::\n\n::::\n\n::::{.my-code-collection-container}\n\n::: {.panel-tabset}\n\n###### Version 1\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-08-validate-input-a}\n: Validate inpu, but the wrong result is still printed\n::::::\n:::\n::::{.my-r-code-container}\n\n```{shinylive-r}\n#| standalone: true\n#| viewerHeight: 500\n#| components: [editor, viewer]\n\nlibrary(shiny)\n\nui <- fluidPage(\n  shinyFeedback::useShinyFeedback(),\n  numericInput(\"n\", \"n\", value = 10),\n  textOutput(\"half\")\n)\n\nserver <- function(input, output, session) {\n  half <- reactive({\n    even <- input$n %% 2 == 0\n    shinyFeedback::feedbackWarning(\n        \"n\", \n        !even, \n        \"Please select an even number\"\n    )\n    input$n / 2    \n  })\n  \n  output$half <- renderText(half())\n}\n\nshinyApp(ui, server)\n```\n\n\n::::\n:::::\n\n\n###### Version 2\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-08-validate-input-b\n: Improved version where the wrong result is not printed\n::::::\n:::\n::::{.my-r-code-container}\n\n```{shinylive-r}\n#| standalone: true\n#| viewerHeight: 500\n#| components: [editor, viewer]\n\nlibrary(shiny)\n\nui <- fluidPage(\n  shinyFeedback::useShinyFeedback(),\n  numericInput(\"n\", \"n\", value = 10),\n  textOutput(\"half\")\n)\n\nserver <- function(input, output, session) {\n  half <- reactive({\n    even <- input$n %% 2 == 0\n    shinyFeedback::feedbackWarning(\n        \"n\", \n        !even, \n        \"Please select an even number\"\n    )\n    req(even)\n    input$n / 2    \n  })\n  \n  output$half <- renderText(half())\n}\n\nshinyApp(ui, server)\n```\n\n***\n\nTo stop inputs from triggering reactive changes, you need a new tool: `shiny::req()`, short for “required”.\n\n::::\n:::::\n\n:::\n\n::::\n:::::\n\n\n:::\n\n\n### Cancelling execution\n\nYou may have noticed that when you start an app, the complete reactive graph is computed even before the user does anything. This works well when you can choose meaningful default values for your inputs. But that’s not always possible, and sometimes you want to wait until the user actually does something. This tends to crop up with three controls:\n\n- In `textInput()`, you’ve used value = \"\" and you don’t want to do anything until the user types something.\n- In `selectInput()`, you’ve provide an empty choice, \"\", and you don’t want to do anything until the user makes a selection.\n- In `fileInput()`, which has an empty result before the user has uploaded anything. We’ll come back to this in @sec-09-file-upload.\n\nWe need some way to “pause” reactives so that nothing happens until some condition is true. That’s the job of `req()`, which checks for required values before allowing a reactive producer to continue.\n\n\n::: {.column-page-inset}\n\n\n::: {.my-code-collection}\n:::: {.my-code-collection-header}\n::::: {.my-code-collection-icon}\n:::::\n:::::: {#exm-08-cancel-execution}\n: Canceling execution\n::::::\n\n::::\n\n::::{.my-code-collection-container}\n\n::: {.panel-tabset}\n\n###### Version 1\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-cancel-execution-a}\n: Cancel execution with error message after start up\n::::::\n:::\n::::{.my-r-code-container}\n\n```{shinylive-r}\n#| standalone: true\n#| viewerHeight: 400\n#| components: [editor, viewer]\n\nlibrary(shiny)\n\nui <- fluidPage(\n  selectInput(\"language\", \"Language\", \n              choices = c(\"\", \"English\", \"Maori\")),\n  textInput(\"name\", \"Name\", \"\"),\n  textOutput(\"greeting\")\n)\n\nserver <- function(input, output, session) {\n  greetings <- c(\n    English = \"Hello\", \n    Maori = \"Kia ora\"\n  )\n  output$greeting <- renderText({\n    paste0(greetings[[input$language]], \" \", input$name, \"!\")\n  })\n}\n\nshinyApp(ui, server)\n```\n\n***\n\nYou’ll see an error immediately after startup, because there’s no entry in the greetings vector that corresponds to the default choice of \"\". After you have chosen from the drop-down menu this error disappears.\n\n::::\n:::::\n\n\n###### Version 2\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-cancel-execution-b}\n: Cancel execution without error message at startup \n::::::\n:::\n::::{.my-r-code-container}\n\n```{shinylive-r}\n#| standalone: true\n#| viewerHeight: 400\n#| components: [editor, viewer]\n\nlibrary(shiny)\n\nui <- fluidPage(\n  selectInput(\"language\", \"Language\", choices = c(\"\", \"English\", \"Maori\")),\n  textInput(\"name\", \"Name\"),\n  textOutput(\"greeting\")\n)\n\nserver <- function(input, output, session) {\n  greetings <- c(\n    English = \"Hello\", \n    Maori = \"Kia ora\"\n  )\n  output$greeting <- renderText({\n    req(input$language, input$name)\n    paste0(greetings[[input$language]], \" \", input$name, \"!\")\n  })\n}\n\nshinyApp(ui, server)\n```\n\n***\n\nWe can fix this problem by using `req()`. Now nothing will be displayed until the user has supplied values for both language and name\n::::\n:::::\n\n:::\n\n::::\n:::::\n\n\n\n\n:::\n\n`req()` works by signalling a special <a class='glossary' title='Condition here means a technical term that includes errors, warnings, and messages. See https://adv-r.hadley.nz/conditions.html,'>condition</a>. This special condition causes all downstream reactives and outputs to stop executing. Technically, it leaves any downstream reactive consumers in an invalidated state. We’ll come back to this terminology in @XXX_16.\n\n`req()` is designed so that `req(input$x)` will only proceed if the user has supplied a value, regardless of the type of the input control. You can also use `req()` with your own logical statement if needed. For example, `req(input$a > 0)` will permit computation to proceed when `a` is greater than 0; this is typically the form you’ll use when performing validation, as we’ll see next.\n\n### `req()` and validation\n\nLet’s combine `req()` and {**shinyFeedback**} to solve a more challenging problem. I’m going to return to the simple app we made in Chapter 1 which allowed you to select a built-in dataset and see its contents. We are  going to make @cnj-01-add-reactive-expression-code more general and more complex by using `textInput()` instead of `selectInput()`.\n\n1. The UI will change very little. \n2. But the server function needs to get a little more complex. We’re going to use `req()` in two ways:\n    - We only want to proceed with computation if the user has entered a value so we do `req(input$dataset)`.\n    - Then we check to see if the supplied name actually exists. If it doesn’t, we display an error message, and then use `req()` to cancel computation.\n    \n::: {.callout-note  #nte-08-canceloutput}\nNote the use of `cancelOutput = TRUE`: normally cancelling a reactive will reset all downstream outputs but `cancelOutput = TRUE` leaves them displaying **the last good value**. This is important for `textInput()` which may trigger an update while you’re in the middle of typing a name.\n:::\n\n::: {.column-page-inset}\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-08-req-validation}\n: `req()` and validation\n::::::\n:::\n::::{.my-r-code-container}\n\n::: {#lst-08-req-validation}\n\n```{shinylive-r}\n#| standalone: true\n#| viewerHeight: 500\n#| components: [editor, viewer]\n\nlibrary(shiny)\n\nui <- fluidPage(\n  shinyFeedback::useShinyFeedback(),\n  textInput(\"dataset\", \"Dataset name\"), \n  tableOutput(\"data\")\n)\n\nserver <- function(input, output, session) {\n  data <- reactive({\n    req(input$dataset)\n    \n    exists <- exists(input$dataset, \"package:datasets\")\n    shinyFeedback::feedbackDanger(\"dataset\", !exists, \"Unknown dataset\")\n    req(exists, cancelOutput = TRUE)\n\n    get(input$dataset, \"package:datasets\")\n  })\n  \n  output$data <- renderTable({\n    head(data())\n  })\n}\n\nshinyApp(ui, server)\n```\n\nValidation with `req()` and {**shinyFeedback**}\n\n:::\n\n***\n\nCompare the similar app without validation in @lst-01-add-reactive-expression-code \n::::\n:::::\n\n:::\n\n### Validate output\n\n{**shinyFeedback**} is great when the problem is related to a single input. But sometimes the invalid state is a result of a combination of inputs. In this case it doesn’t really make sense to put the error next to an input (which one would you put it beside?) and instead it makes more sense to put it in the output.\n\nYou can do so with a tool built into `shiny: validate()`. When called inside a reactive or an output, `validate(message)` stops execution of the rest of the code and instead displays `message` in any downstream outputs. \n\n::: {.column-page-inset}\n\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-08-validate-output}\n: Validate combinations of inputs and display message in the output\n::::::\n:::\n::::{.my-r-code-container}\n\n::: {#lst-validate-output}\n\n```{shinylive-r}\n#| standalone: true\n#| viewerHeight: 550\n#| components: [editor, viewer]\n\nlibrary(shiny)\n\nui <- fluidPage(\n  numericInput(\"x\", \"x\", value = 0),\n  selectInput(\"trans\", \"transformation\", \n    choices = c(\"square\", \"log\", \"square-root\")\n  ),\n  textOutput(\"out\")\n)\n\nserver <- function(input, output, session) {\n  output$out <- renderText({\n    if (input$x < 0 && input$trans %in% c(\"log\", \"square-root\")) {\n      validate(\"x can not be negative for this transformation\")\n    }\n    \n    switch(input$trans,\n      square = input$x ^ 2,\n      \"square-root\" = sqrt(input$x),\n      log = log(input$x)\n    )\n  })\n}\n\nshinyApp(ui, server)\n```\n\n\nNo negative values allowed for `log` or `square-root` input.\n:::\n***\n\n\n::::\n:::::\n\n:::\n\nIf the inputs are valid, the output shows the transformation. If the combination of inputs is invalid, then the output is replaced with an informative message.\n\n\n## Notification\n\nIf there isn’t a problem and you just want to let the user know what’s happening, then you want a notification. In Shiny, notifications are created with `showNotification()`, and stack in the bottom right of the page. There are three basic ways to use `showNotification()`:\n\na) To show a transient notification that automatically disappears after a fixed amount of time.\nb) To show a notification when a process starts and remove it when the process ends.\nc) To update a single notification with progressive updates.\n\n### Transient notification\n\n::: {.column-page-inset}\n\n::: {.my-code-collection}\n:::: {.my-code-collection-header}\n::::: {.my-code-collection-icon}\n:::::\n:::::: {#exm-08-transient-notification}\n: Transient notification\n::::::\n\n::::\n\n::::{.my-code-collection-container}\n\n::: {.panel-tabset}\n\n###### Default message\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-08-transient-notification-default}\n: Four default (grey) transient notifications\n::::::\n:::\n::::{.my-r-code-container}\n\n```{shinylive-r}\n#| standalone: true\n#| viewerHeight: 400\n#| components: [editor, viewer]\n\nlibrary(shiny)\n\nui <- fluidPage(\n  actionButton(\"goodnight\", \"Good night\")\n)\n\nserver <- function(input, output, session) {\n  observeEvent(input$goodnight, {\n    showNotification(\"So long\")\n    Sys.sleep(1)\n    showNotification(\"Farewell\")\n    Sys.sleep(1)\n    showNotification(\"Auf Wiedersehen\")\n    Sys.sleep(1)\n    showNotification(\"Adieu\")\n  })\n}\n\nshinyApp(ui, server)\n```\n\n\n::::\n:::::\n\n\n\n###### 4 Types\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-08-transient-four-types}\n: Default, message, warning, and errer notifications\n::::::\n:::\n::::{.my-r-code-container}\n\n```{shinylive-r}\n#| standalone: true\n#| viewerHeight: 400\n#| components: [editor, viewer]\n\nlibrary(shiny)\n\nui <- fluidPage(\n  actionButton(\"goodnight\", \"Good night\")\n)\n\nserver <- function(input, output, session) {\n  observeEvent(input$goodnight, {\n    showNotification(\"So long\")\n    Sys.sleep(1)\n    showNotification(\"Farewell\", type = \"message\")\n    Sys.sleep(1)\n    showNotification(\"Auf Wiedersehen\", type = \"warning\")\n    Sys.sleep(1)\n    showNotification(\"Adieu\", type = \"error\")\n  })\n}\n\nshinyApp(ui, server)\n```\n\n\n::::\n:::::\n\n:::\n\n::::\n:::::\n\n:::\n\n\n### Removing on completion\n\nIt’s often useful to tie the presence of a notification to a long-running task. In this case, you want to show the notification when the task starts, and remove the notification when the task completes. To do this, you’ll need to:\n\nSet `duration = NULL` and `closeButton = FALSE` so that the notification stays visible until the task is complete.\n\nStore the `id` returned by `showNotification()`, and then pass this value to `removeNotification()`. The most reliable way to do so is to use `on.exit()`, which ensures that the notification is removed regardless of how the task completes (either successfully or with an error). You can learn more about `on.exit()` in [Changing and restoring state](https://withr.r-lib.org/articles/changing-and-restoring-state.html)^[This link refers to {**withr**} -- a package for running code 'with' temporarily modified global state.]\n\n\n::: {.column-page-inset}\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-08-removing-on-completion}\n: Removing on completion\n::::::\n:::\n::::{.my-r-code-container}\n\n```{shinylive-r}\n#| standalone: true\n#| viewerHeight: 400\n#| components: [editor, viewer]\n\nlibrary(shiny)\n\nui <- fluidPage(\n  actionButton(\"start\", \"Start execution\")\n)\n\nserver <- function(input, output, session) {\n  observeEvent(input$start, {\n    id <- showNotification(\n      \"Reading data...\", \n      duration = NULL, \n      closeButton = FALSE\n      )\n    on.exit(removeNotification(id), add = TRUE)\n    Sys.sleep(5)\n  })\n}\n\nshinyApp(ui, server)\n```\n\n***\n\nAfter clicking on the \"Start\" button this simulation shows the notification for five seconds and then -- when the (simulated) task is finished -- disappears.\n\n::::\n:::::\n\n:::\n\n\n### Progressive updates\n\nAs you saw in the first example, multiple calls to `showNotification()` usually create multiple notifications. You can instead update a single notification by capturing the id from the first call and using it in subsequent calls. This is useful if your long-running task has multiple subcomponents. You can see the results in https://hadley.shinyapps.io/ms-notification-updates.\n\n\n::: {.column-page-inset}\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-08-progressive-updates}\n: Progressive updates\n::::::\n:::\n::::{.my-r-code-container}\n\n```{shinylive-r}\n#| standalone: true\n#| viewerHeight: 550\n#| components: [editor, viewer]\n\nlibrary(shiny)\n\n\nui <- fluidPage(\n    actionButton(\"go\", \"Start\"),\n    tableOutput(\"data\")\n)\n\nserver <- function(input, output, session) {\n    notify <- function(msg, id = NULL) {\n        showNotification(msg, id = id, duration = NULL, closeButton = FALSE)\n    }\n\n    data <- eventReactive(input$go, {\n        id <- notify(\"Reading data...\")\n        on.exit(removeNotification(id), add = TRUE)\n        Sys.sleep(1)\n\n        notify(\"Reticulating splines...\", id = id)\n        Sys.sleep(1)\n\n        notify(\"Herding llamas...\", id = id)\n        Sys.sleep(1)\n\n        notify(\"Orthogonalizing matrices...\", id = id)\n        Sys.sleep(1)\n\n        mtcars\n    })\n\n    output$data <- renderTable({\n            head(data())\n    })\n\n}\n\nshinyApp(ui, server)\n```\n\n\n\n::::\n:::::\n\n:::\n\n\n::: {.callout-note #nte-08-progressive-updates}\nI have added the \"Start\" button so that I can repeat the calculation without running the program from scratch.  For this small change I had to change `reactive()` to `eventReactive()`.\n\nI also tried to implement a \"Reset\" button, but I didn't know how to do it at my current state of knowledge. Maybe I will come back, when I learned more and understand Shiny better.\n:::\n\n## Progress bars\n\nFor long-running tasks, the best type of feedback is a progress bar. In this section, I’ll show two techniques for displaying progress bars, one built into Shiny, and one from the {**waiter**} package developed by John Coene [-@waiter].\n\nUnfortunately both techniques suffer from the same major drawback: to use a progress bar you need to be able to divide the big task into a known number of small pieces that each take roughly the same amount of time. This is often hard, particularly since the underlying code is often written in C and it has no way to communicate progress updates to you. We are working on tools in the {**progress**} package so that packages like {**dplyr**}, {**readr**}, and {**vroom**} will one day generate progress bars that you can easily forward to Shiny.\n\n::: {.callout-note #nte-08-progress-bars}\nIf your code doesn't have a loop or apply/map function, it#s going to be very difficult to implement a progress bar.\n:::\n\n\n### Shiny\n\n::: {.column-page-inset}\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-08-progress-bar-shiny}\n: Progress bar with Shiny\n::::::\n:::\n::::{.my-r-code-container}\n\n```{shinylive-r}\n#| standalone: true\n#| viewerHeight: 550\n#| components: [editor, viewer]\n\nlibrary(shiny)\n\nui <- fluidPage(\n  numericInput(\"steps\", \"How many steps?\", 10),\n  actionButton(\"go\", \"go\"),\n  textOutput(\"result\")\n)\n\nserver <- function(input, output, session) {\n  data <- eventReactive(input$go, {\n    withProgress(message = \"Computing random number\", {\n        for (i in seq_len(input$steps)) {\n          Sys.sleep(0.5)\n          incProgress(1 / input$steps)\n        }\n      runif(1)\n    })\n  })\n  \n    output$result <- renderText(\n      paste(\"Random number computed:\", round(data(), 2))\n      )\n}\n\nshinyApp(ui, server)\n```\n\n\n::::\n:::::\n:::\n\nA few things to note:\n\n- I used the optional `message` argument to add some explanatory text to the progress bar.\n- I used `Sys.sleep()` to simulate a long running operation; in your code this would be a slow function.\n- I allowed the user to control when the event starts by combining a button with `eventReactive()`. This is good practice for any task that requires a progress bar.\n- Additionally, I (pb) added label before the output of the random number. Otherwise one could believe that the number is a time indicator ranging from 0 to 1.\n\n### Waiter\n\nThe built-in progress bar is great for the basics, but if you want something that provides more visual options, you might try the {**waiter**} package. Adapting the above code to work with Waiter is straightforward.\n\n- In the UI we just have to `add waiter::use_waitress()` to invoke the {**waiter**} package.\n- The interface for Waiter’s progress bars are a little different. The {**waiter**} package uses an <a class='glossary' title='An R6 object is an implementation of encapsulated object-oriented programming (OOP) in the R programming language. It provides a way to create classes and objects with both public and private members, allowing for better organization of code and data. More info at https://adv-r.hadley.nz/r6.html'>R6</a> object to bundle all progress related functions into a single object.\n\n::: {.column-page-inset}\n\n::: {.my-code-collection}\n:::: {.my-code-collection-header}\n::::: {.my-code-collection-icon}\n:::::\n:::::: {#exm-08-progress-bar-waiter}\n: Progress bar with Waiter\n::::::\n\n::::\n\n::::{.my-code-collection-container}\n\n::: {.panel-tabset}\n\n###### Standard\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-08-progress-bar-waiter-standard}\n: Progress bar with Waiter with standard progress bar at top margin\n::::::\n:::\n::::{.my-r-code-container}\n\n```{shinylive-r}\n#| standalone: true\n#| viewerHeight: 550\n#| components: [editor, viewer]\n\nlibrary(shiny)\n\nui <- fluidPage(\n  waiter::use_waitress(),\n  numericInput(\"steps\", \"How many steps?\", 10),\n  actionButton(\"go\", \"go\"),\n  textOutput(\"result\")\n)\n\nserver <- function(input, output, session) {\n  data <- eventReactive(input$go, {\n    waitress <- waiter::Waitress$new(max = input$steps)\n    on.exit(waitress$close())\n    \n    for (i in seq_len(input$steps)) {\n      Sys.sleep(0.5)\n      waitress$inc(1)\n    }\n    \n    runif(1)\n  })\n  \n  output$result <- renderText(\n    paste(\"Random number computed:\", round(data(), 2))\n    )\n}\n\nshinyApp(ui, server)\n```\n\n\n::::\n:::::\n\n\n###### Customize\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-08-progress-bar-waiter-customize}\n: Progress bar with Waiter with progress bar to customize\n::::::\n:::\n::::{.my-r-code-container}\n\n```{shinylive-r}\n#| standalone: true\n#| viewerHeight: 550\n#| components: [editor, viewer]\n\nlibrary(shiny)\n\nui <- fluidPage(\n    waiter::use_waitress(),\n    numericInput(\"steps\", \"How many steps?\", 10),\n    radioButtons(\n        inputId = \"area\",\n        label = \"Area for progress bar\" ,\n        choices = list(\n            \"Screen\" = 1,\n            \"Input area\" = \"#steps\"\n        )\n    ),\n    radioButtons(\n        inputId = \"type\",\n        label = \"Type of progress bar\",\n        choices = list(\n            \"Line at the top\" = \"line\",\n            \"Black \" = \"overlay\",\n            \"Black with percent\" = \"overlay-percent\",\n            \"Translucent\" = \"overlay-opacity\"\n    )\n  ),\n  actionButton(\"go\", \"go\"),\n  textOutput(\"result\")\n)\n\nserver <- function(input, output, session) {\n  data <- eventReactive(input$go, {\n   waitress <- waiter::Waitress$new(\n            if (input$area == 1) {\n                selector = NULL\n            } else {\n                selector = input$area\n            },\n            theme = input$type,\n            max = input$steps\n        )\n    on.exit(waitress$close())\n\n    for (i in seq_len(input$steps)) {\n        Sys.sleep(0.5)\n        waitress$inc(1)\n    }\n  runif(1)\n    })\n\n  output$result <- renderText(\n      paste(\"Random number computed:\", round(data(), 2))\n  )\n}\n\nshinyApp(ui = ui, server = server)\n\n```\n\n***\n\nHere I have provided several choices to experiment with the some options for progress bars of the {**waiter**} package. The explanation follows in the running text.\n::::\n:::::\n\n:::\n\n::::\n:::::\n\n\n:::\n\nThe default display is a thin progress bar at the top of the page, but there are a number of ways to customise the output:\n\n- You can override the default `theme` to use one of:\n  - `overlay`: an opaque progress bar that hides the whole page\n  - `overlay-opacity`: a translucent progress bar that covers the whole page\n  - `overlay-percent`: an opaque progress bar that also displays a numeric percentage.\n- Instead of showing a progress bar for the entire page, you can overlay it on an existing input or output by setting the `selector` parameter, e.g.:\n   `waitress <- Waitress$new(selector = \"#steps\", theme = \"overlay\")`\n   \n   \n### Spinners\n\nSometimes you don’t know exactly how long an operation will take, and you just want to display an animated spinner that reassures the user that something is happening. You can also use the {**waiter*} package for this task; just switch from using a `Waitress` to using a `Waiter`:\n\n::: {.column-page-inset}\n\n\n::: {.my-code-collection}\n:::: {.my-code-collection-header}\n::::: {.my-code-collection-icon}\n:::::\n:::::: {#exm-08-spinners}\n: Spinners as work indicator\n::::::\n\n::::\n\n::::{.my-code-collection-container}\n\n::: {.panel-tabset}\n\n###### Standard\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-08-spinners-standard}\n: Standard spinners with the {**waiter**} package as an indicator that the program is working \n::::::\n:::\n::::{.my-r-code-container}\n\n```{shinylive-r}\n#| standalone: true\n#| viewerHeight: 550\n#| components: [editor, viewer]\n\nlibrary(shiny)\n\nui <- fluidPage(\n  waiter::use_waiter(),\n  actionButton(\"go\", \"go\"),\n  textOutput(\"result\")\n)\n\nserver <- function(input, output, session) {\n  data <- eventReactive(input$go, {\n    waiter <- waiter::Waiter$new()\n    waiter$show()\n    on.exit(waiter$hide())\n    \n    Sys.sleep(sample(5, 1))\n    runif(1)\n  })\n  output$result <- renderText(round(data(), 2))\n}\n\nshinyApp(ui, server)\n```\n\n\n::::\n:::::\n\n\n###### Customize\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-08-spinners-customize}\n: Customized spinners as a indicator that the program is working \n::::::\n:::\n::::{.my-r-code-container}\n\n```{shinylive-r}\n#| standalone: true\n#| viewerHeight: 550\n#| components: [editor, viewer]\n\nlibrary(shiny)\n\nui <- fluidPage(\n  waiter::use_waiter(),\n  actionButton(\"go\", \"go\"),\n  plotOutput(\"plot\"),\n)\n\nserver <- function(input, output, session) {\n  data <- eventReactive(input$go, {\n    waiter::Waiter$new(id = \"plot\")$show()\n    \n    Sys.sleep(3)\n    data.frame(x = runif(50), y = runif(50))\n  })\n  \n  output$plot <- renderPlot(plot(data()), res = 96)\n}\n\nshinyApp(ui, server)\n```\n\n\n::::\n:::::\n\n:::\n\n::::\n:::::\n\n\n:::\n\nThe {**waiter*} package provides a large variety of spinners to choose from. There are more than 60 (!) options at `?waiter::spinners`. Choose one (e.g.) `Waiter$new(html = spin_ripple())`.\n\n::: {.callout-warning #wrn-waiter}\n###### The [documentation](https://waiter.john-coene.com/#/) is helpful but outdated.\n\nFor instance the function `call_waitress()` does not exist anymore.\n:::\n\n### shinycssloaders\n\nAn even simpler alternative is to use the {**shinycssloaders**} package by Dean Attali [-@shinycssloaders]. It uses JavaScript to listen to Shiny events, so it doesn’t even need any code on the server side. Instead, you just use `shinycssloaders::withSpinner()` to wrap outputs that you want to automatically get a spinner when they have been invalidated.\n\n::: {.column-page-inset}\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-08-shinycssloaders}\n: shinycssloaders\n::::::\n:::\n::::{.my-r-code-container}\n\n```{shinylive-r}\n#| standalone: true\n#| viewerHeight: 550\n#| components: [editor, viewer]\n\nlibrary(shiny)\n\nui <- fluidPage(\n  actionButton(\"go\", \"go\"),\n  shinycssloaders::withSpinner(plotOutput(\"plot\")),\n)\nserver <- function(input, output, session) {\n  data <- eventReactive(input$go, {\n    Sys.sleep(3)\n    data.frame(x = runif(50), y = runif(50))\n  })\n  \n  output$plot <- renderPlot(plot(data()), res = 96)\n}\n\nshinyApp(ui, server)\n```\n\n\n::::\n:::::\n\n:::\n\n::: {.callout-note #nte-shinycssloader}\nThere is a {**shinycssloaders**} demo, where you can test all different options of the package.\n:::\n\n## Confirming and undoing\n\nSometimes an action is potentially dangerous, and you either want to make sure that the user really wants to do it, or you want to give them the ability to back out before it’s too late. Of the three options (explicit confirmation, undoing an action and trash) the last one is a complex strategy difficult to realize in Shiny and therefore out of scope of this book.\n\n### Explicit confirmation\n\nThe simplest approach to protecting the user from accidentally performing a dangerous action is to require an explicit confirmation. The easiest way is to use a dialog box which forces the user to pick from one of a small set of actions. In Shiny, you create a dialog box with `modalDialog()`. This is called a “modal” dialog because it creates a new “mode” of interaction; you can’t interact with the main application until you have dealt with the dialog.\n\nImagine you have a Shiny app that deletes some files from a directory (or rows in a database etc). This is hard to undo so you want to make sure that the user is really sure. You could create a dialog box requiring an explicit confirmation:\n\nThere are a few small, but important, details to consider when creating a dialog box:\n\n- What should you call the buttons? It’s best to be descriptive, so avoid yes/no or continue/cancel in favor of recapitulating the key verb.\n- How should you order the buttons? Do you put cancel first (like the Mac), or continue first (like Windows)? Your best option is to mirror the platform that you think most people will be using\n- Can you make the dangerous option more obvious? Here I’ve used `class = btn btn-danger` to style the button prominently.\n\nThere is more advice on choosing th4e right button names and ordering by [Jakob Nielson](https://www.nngroup.com/articles/ok-cancel-or-cancel-ok/).\n\n::: {.column-page-inset}\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-08-explicit-confirmation}\n: Explicit confirmation\n::::::\n:::\n::::{.my-r-code-container}\n\n```{shinylive-r}\n#| standalone: true\n#| viewerHeight: 550\n#| components: [editor, viewer]\n\nlibrary(shiny)\n\nmodal_confirm <- modalDialog(\n  \"Are you sure you want to continue?\",\n  title = \"Deleting files\",\n  footer = tagList(\n    actionButton(\"cancel\", \"Cancel\"),\n    actionButton(\"ok\", \"Delete\", class = \"btn btn-danger\")\n  )\n)\n\nui <- fluidPage(\n  actionButton(\"delete\", \"Delete all files?\")\n)\n\nserver <- function(input, output, session) {\n  observeEvent(input$delete, {\n    showModal(modal_confirm)\n  })\n  \n  observeEvent(input$ok, {\n    showNotification(\"Files deleted\")\n    removeModal()\n  })\n  observeEvent(input$cancel, {\n    removeModal()\n  })\n}\n\nshinyApp(ui, server)\n```\n\n\n::::\n:::::\n\n:::\n\nThere are two new ideas in the server():\n\n- We use `showModal()` and `removeModal()` to show and hide the dialog.\n- We observe events generated by the UI from `modal_confirm`. These objects aren’t created statically in the ui, but are instead dynamically added in the `server()` by `showModal()`. You’ll see that idea in much more detail in @XXX_10.\n\n### Undoing an action\n\nExplicit confirmation is most useful for destructive actions that are only performed infrequently. You should avoid it if you want to reduce the errors made by frequent actions. For example, this technique would not work for twitter — if there was a dialog box that said “Are you sure you want to tweet this?” you would soon learn to automatically click yes, and still feel the same feeling of regret when you notice a typo 10s after tweeting.\n\nIn this situation a better approach is to wait few seconds before actually performing the action, giving the user a chance to notice any problems and undo them. This isn’t really an undo (since you’re not actually doing anything), but it’s an evocative word that users will understand.\n\nI illustrate the technique with a website that I personally wish had an undo button: Twitter. \n\n- The essence of the Twitter UI is very simple: there’s a text area to compose your tweet and a button to send it.\n- The server function is quite complex and requires some techniques that we haven’t talked about. Don’t worry too much about understanding the code, focus on the basic idea: we use some special arguments to `observeEvent()` to run some code after a few seconds. The big new idea is that we capture the result of `observeEvent()` and save it to a variable; this allows us to destroy the observer so the code that would really send the tweet is never run.\n\n::: {.column-page-inset}\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-08-undo-an-action}\n: Undo an action\n::::::\n:::\n::::{.my-r-code-container}\n\n```{shinylive-r}\n#| standalone: true\n#| viewerHeight: 550\n#| components: [editor, viewer]\n\nlibrary(shiny)\n\nrunLater <- function(action, seconds = 3) {\n  observeEvent(\n    invalidateLater(seconds * 1000), action, \n    ignoreInit = TRUE, \n    once = TRUE, \n    ignoreNULL = FALSE,\n    autoDestroy = FALSE\n  )\n}\n\n\nui <- fluidPage(\n  textAreaInput(\"message\", \n    label = NULL, \n    placeholder = \"What's happening?\",\n    rows = 3\n  ),\n  actionButton(\"tweet\", \"Tweet\")\n)\n\nserver <- function(input, output, session) {\n  waiting <- NULL\n  last_message <- NULL\n  \n  observeEvent(input$tweet, {\n    notification <- glue::glue(\"Tweeted '{input$message}'\")\n    last_message <<- input$message\n    updateTextAreaInput(session, \"message\", value = \"\")\n\n    showNotification(\n      notification,\n      action = actionButton(\"undo\", \"Undo?\"),\n      duration = NULL,\n      closeButton = FALSE,\n      id = \"tweeted\",\n      type = \"warning\"\n    )\n\n    waiting <<- runLater({\n      cat(\"Actually sending tweet...\\n\")\n      removeNotification(\"tweeted\")\n    })\n  })\n  \n  observeEvent(input$undo, {\n    waiting$destroy()\n    showNotification(\"Tweet retracted\", id = \"tweeted\")\n    updateTextAreaInput(session, \"message\", value = last_message)\n  })\n}\n\nshinyApp(ui, server)\n```\n\n\n\n::::\n:::::\n\n:::\n\n@cnj-08-undo-an-action is a complex code chunk. The operator `<<-` is normally only used in functions, and cause a search to be made through parent environments for an existing definition of the variable being assigned. If such a variable is found (and its binding is not locked) then its value is redefined, otherwise assignment takes place in the global environment. \n\nIn this case the `<<-` are referring to the variables defined outside the `observeEvent()` functions: `waiting` and `last_message`.\n\n### Trash\n\nFor actions that you might regret days later, a more sophisticated pattern is to implement something like the trash or recycling bin on your computer. When you delete a file, it isn’t permanently deleted but instead is moved to a holding cell, which requires a separate action to empty. This is like the “undo” option on steroids; you have a lot of time to regret your action. It’s also a bit like the confirmation; you have to do two separate actions to make deletion permanent.\n\nThe primary downside of this technique is that it is substantially more complicated to implement (you have to have a separate “holding cell” that stores the information needed to undo the action), and requires regular intervention from the user to avoid accumulating. For that reason, I think it’s beyond the scope of all but the most complicated Shiny apps, so I’m not going to show an implementation here.\n\n\n## Glossary Entries {.unnumbered}\n\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table\" style=\"margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> term </th>\n   <th style=\"text-align:left;\"> definition </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> Conditionx </td>\n   <td style=\"text-align:left;\"> Condition here means a technical term that includes errors, warnings, and messages. See &lt;https://adv-r.hadley.nz/conditions.html&gt;, </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> R6 </td>\n   <td style=\"text-align:left;\"> An R6 object is an implementation of encapsulated object-oriented programming (OOP) in the R programming language. It provides a way to create classes and objects with both public and private members, allowing for better organization of code and data. More info at &lt;https://adv-r.hadley.nz/r6.html&gt; </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n------------------------------------------------------------------------\n\n## Session Info {.unnumbered}\n\n::: my-r-code\n::: my-r-code-header\nSession Info\n:::\n\n::: my-r-code-container\n\n::: {.cell}\n\n```{.r .cell-code}\nsessioninfo::session_info()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> ─ Session info ───────────────────────────────────────────────────────────────\n#>  setting  value\n#>  version  R version 4.5.0 (2025-04-11)\n#>  os       macOS Sequoia 15.5\n#>  system   aarch64, darwin20\n#>  ui       X11\n#>  language (EN)\n#>  collate  en_US.UTF-8\n#>  ctype    en_US.UTF-8\n#>  tz       Europe/Vienna\n#>  date     2025-06-19\n#>  pandoc   3.4 @ /Applications/RStudio.app/Contents/Resources/app/quarto/bin/tools/aarch64/ (via rmarkdown)\n#>  quarto   1.8.4 @ /usr/local/bin/quarto\n#> \n#> ─ Packages ───────────────────────────────────────────────────────────────────\n#>  package      * version    date (UTC) lib source\n#>  cli            3.6.5      2025-04-23 [1] CRAN (R 4.5.0)\n#>  commonmark     1.9.5      2025-03-17 [1] CRAN (R 4.5.0)\n#>  curl           6.3.0      2025-06-06 [1] CRAN (R 4.5.0)\n#>  dichromat      2.0-0.1    2022-05-02 [1] CRAN (R 4.5.0)\n#>  digest         0.6.37     2024-08-19 [1] CRAN (R 4.5.0)\n#>  dplyr          1.1.4      2023-11-17 [1] CRAN (R 4.5.0)\n#>  evaluate       1.0.3      2025-01-10 [1] CRAN (R 4.5.0)\n#>  farver         2.1.2      2024-05-13 [1] CRAN (R 4.5.0)\n#>  fastmap        1.2.0      2024-05-15 [1] CRAN (R 4.5.0)\n#>  generics       0.1.4      2025-05-09 [1] CRAN (R 4.5.0)\n#>  ggplot2        3.5.2      2025-04-09 [1] CRAN (R 4.5.0)\n#>  glossary     * 1.0.0.9003 2025-06-08 [1] local\n#>  glue           1.8.0      2024-09-30 [1] CRAN (R 4.5.0)\n#>  gtable         0.3.6      2024-10-25 [1] CRAN (R 4.5.0)\n#>  htmltools      0.5.8.1    2024-04-04 [1] CRAN (R 4.5.0)\n#>  htmlwidgets    1.6.4      2023-12-06 [1] CRAN (R 4.5.0)\n#>  jsonlite       2.0.0      2025-03-27 [1] CRAN (R 4.5.0)\n#>  kableExtra     1.4.0      2024-01-24 [1] CRAN (R 4.5.0)\n#>  knitr          1.50       2025-03-16 [1] CRAN (R 4.5.0)\n#>  lifecycle      1.0.4      2023-11-07 [1] CRAN (R 4.5.0)\n#>  litedown       0.7        2025-04-08 [1] CRAN (R 4.5.0)\n#>  magrittr       2.0.3      2022-03-30 [1] CRAN (R 4.5.0)\n#>  markdown       2.0        2025-03-23 [1] CRAN (R 4.5.0)\n#>  pillar         1.10.2     2025-04-05 [1] CRAN (R 4.5.0)\n#>  pkgconfig      2.0.3      2019-09-22 [1] CRAN (R 4.5.0)\n#>  R6             2.6.1      2025-02-15 [1] CRAN (R 4.5.0)\n#>  RColorBrewer   1.1-3      2022-04-03 [1] CRAN (R 4.5.0)\n#>  rlang          1.1.6      2025-04-11 [1] CRAN (R 4.5.0)\n#>  rmarkdown      2.29       2024-11-04 [1] CRAN (R 4.5.0)\n#>  rstudioapi     0.17.1     2024-10-22 [1] CRAN (R 4.5.0)\n#>  rversions      2.1.2      2022-08-31 [1] CRAN (R 4.5.0)\n#>  scales         1.4.0      2025-04-24 [1] CRAN (R 4.5.0)\n#>  sessioninfo    1.2.3      2025-02-05 [1] CRAN (R 4.5.0)\n#>  stringi        1.8.7      2025-03-27 [1] CRAN (R 4.5.0)\n#>  stringr        1.5.1      2023-11-14 [1] CRAN (R 4.5.0)\n#>  svglite        2.2.1      2025-05-12 [1] CRAN (R 4.5.0)\n#>  systemfonts    1.2.3      2025-04-30 [1] CRAN (R 4.5.0)\n#>  textshaping    1.0.1      2025-05-01 [1] CRAN (R 4.5.0)\n#>  tibble         3.3.0      2025-06-08 [1] CRAN (R 4.5.0)\n#>  tidyselect     1.2.1      2024-03-11 [1] CRAN (R 4.5.0)\n#>  vctrs          0.6.5      2023-12-01 [1] CRAN (R 4.5.0)\n#>  viridisLite    0.4.2      2023-05-02 [1] CRAN (R 4.5.0)\n#>  xfun           0.52       2025-04-02 [1] CRAN (R 4.5.0)\n#>  xml2           1.3.8      2025-03-14 [1] CRAN (R 4.5.0)\n#>  yaml           2.3.10     2024-07-26 [1] CRAN (R 4.5.0)\n#> \n#>  [1] /Library/Frameworks/R.framework/Versions/4.5-arm64/library\n#>  [2] /Library/Frameworks/R.framework/Versions/4.5-arm64/Resources/library\n#>  * ── Packages attached to the search path.\n#> \n#> ──────────────────────────────────────────────────────────────────────────────\n```\n\n\n:::\n:::\n\n:::\n:::\n\n",
    "supporting": [
      "08-user-feedback_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"site_libs/kePrint-0.0.1/kePrint.js\"></script>\n<link href=\"site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}