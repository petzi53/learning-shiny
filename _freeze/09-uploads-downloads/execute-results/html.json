{
  "hash": "b3c280e0b27ce82596445e2bbf456269",
  "result": {
    "engine": "knitr",
    "markdown": "# Uploads and downloads {#sec-chap09}\n\n\n\n\n## Table of content for chapter 09 {.unnumbered}\n\n::::: {#obj-chap03}\n:::: {.my-objectives}\n::: {.my-objectives-header}\nChapter section list\n:::\n\n::: {.my-objectives-container}\n\n\n:::\n::::\n:::::\n\n## File upload {#sec-09-file-upload}\n\n### UI\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-09-file-upload-ui}\n: File upload UI\n::::::\n:::\n::::{.my-r-code-container}\n```{shinylive-r}\n#| standalone: true\n#| viewerHeight: 400\n#| components: [editor, viewer]\n\n\nui <- fluidPage(\n  fileInput(\"upload\", \"Upload a file\")\n)\n\nserver <- function(input, output, session) {\n\n}\n\nshinyApp(ui, server)\n```\n\n***\n\nTry in interactive mode adding / changing the arguments `label`, `width`, `buttonLabel` and `placeholder` to see how it affects the UI appearance.\n::::\n:::::\n\nThe UI needed to support file uploads is simple: just add `shiny::fileInput()` to your UI.\n\nLike most other UI components, there are only two required arguments: `id` and `label`. The `width`, `buttonLabel` and `placeholder` arguments allow you to tweak the appearance in other ways. I won’t discuss them here, but you can read more about them in [File Upload Control — fileInput](https://shiny.posit.co/r/reference/shiny/1.6.0/fileinput.html).\n\n### Server\n\nHandling `fileInput()` on the server is a little more complicated than other inputs. Most inputs return simple vectors, but `fileInput()` returns a data frame with four columns:\n\n- **name**: the original file name on the user’s computer.\n- **size**: the file size, in bytes. By default, the user can only upload files up to 5 MB. You can increase this limit by setting the shiny.maxRequestSize option prior to starting Shiny. For example, to allow up to 10 MB run options(shiny.maxRequestSize = 10 * 1024^2).\n- **type**: the <a class='glossary' title='A MIME type, short for Multipurpose Internet Mail Extensions, specifies the nature and format of a document, file, or collection of bytes. It helps identify the type of data being transmitted over the internet, such as text, images, videos, or applications. MIME types consist of two parts separated by a slash: the media type and the subtype. For example, ‘image/jpeg’ indicates a JPEG image file.'>MIME type</a> of the file. This is a formal specification of the file type that is usually derived from the extension and is rarely needed in Shiny apps.\n- **datapath**: the path to where the data has been uploaded on the server. Treat this path as ephemeral: if the user uploads more files, this file may be deleted. The data is always saved to a temporary directory and given a temporary name.\n\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-09-file-upload-server}\n: File upload server \n::::::\n:::\n::::{.my-r-code-container}\n\n```{shinylive-r}\n#| standalone: true\n#| viewerHeight: 400\n#| components: [editor, viewer]\n#| layout: vertical\n\nui <- fluidPage(\n  fileInput(\"upload\", NULL, buttonLabel = \"Upload...\", multiple = TRUE),\n  tableOutput(\"files\")\n)\nserver <- function(input, output, session) {\n  output$files <- renderTable(input$upload)\n}\n\nshinyApp(ui, server)\n```\n\n::: {.callout-warning #wrn-09-file-upload-server}\n\n`fileInput()` does not show multiple uploaded files. One can see only the last one. \n\nThis issue was on May 2, 2021 [opened at GitHub](https://github.com/hadley/mastering-shiny/issues/468), but it is still not closed. I do not know with my rudimentary knowledge at the moment (2025-06-08) how to solve this problem.\n\n\n:::\n\n\n::::\n:::::\n\n\n### Uploading data\n\nIf the user is uploading a dataset, there are two details that you need to be aware of:\n\n- `input$upload` is initialized to `NULL` on page load, so you’ll need `req(input$upload)` to make sure your code waits until the first file is uploaded.\n- The `accept` argument allows you to limit the possible inputs. The easiest way is to supply a character vector of file extensions, like `accept = \".csv\"`. But the accept argument is only a suggestion to the browser, and is not always enforced, so it’s good practice to also validate it (e.g. @sec-08-validating-input) yourself. The easiest way to get the file extension in R is `tools::file_ext()`, just be aware it removes the leading `.` from the extension.\n\nPutting all these ideas together gives us the following app where you can upload a `.csv` or `.tsv` file and see the first `n` rows. See it in action in <https://hadley.shinyapps.io/ms-upload-validate>.\n\n\n::: {.column-page-inset}\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-09-uploading-data}\n: Uploading data\n::::::\n:::\n::::{.my-r-code-container}\n\n```{shinylive-r}\n#| standalone: true\n#| viewerHeight: 550\n#| components: [editor, viewer]\n\nlibrary(shiny)\n\nui <- fluidPage(\n  fileInput(\"upload\", NULL, accept = c(\".csv\", \".tsv\")),\n  numericInput(\"n\", \"Rows\", value = 5, min = 1, step = 1),\n  tableOutput(\"head\")\n)\n\nserver <- function(input, output, session) {\n  data <- reactive({\n    req(input$upload)\n\n    ext <- tools::file_ext(input$upload$name)\n    switch(ext,\n      csv = vroom::vroom(input$upload$datapath, delim = \",\"),\n      tsv = vroom::vroom(input$upload$datapath, delim = \"\\t\"),\n      validate(\"Invalid file; Please upload a .csv or .tsv file\")\n    )\n  })\n\n  output$head <- renderTable({\n    head(data(), input$n)\n  })\n}\n\nshinyApp(ui, server)\n```\n\n::::\n:::::\n\n:::\n\n::: {.callout-note #nte-09-upload-data}\nNote that since `multiple = FALSE` (the default), `input$file` will be a single row data frame, and `input$file$name` and `input$file$datapath` will be a length-1 character vector.\n:::\n\n## Donwloads\n\n### Basics\n\n- Again, the UI is straightforward: use either `downloadButton(id)` or `downloadLink(id)` to give the user something to click to download a file. You can customise their appearance using the same class and icon arguments as for `actionButtons()`, as described in @sec-02-action-buttons.\n- Unlike other outputs, `downloadButton()` is not paired with a render function. Instead, you use `downloadHandler()`.\n\n`downloadHandler()` has two arguments, both functions:\n\n- `filename` should be a function with no arguments that returns a file name (as a string). The job of this function is to create the name that will be shown to the user in the download dialog box.\n- `content` should be a function with one argument, `file`, which is the path to save the file. The job of this function is to save the file in a place that Shiny knows about, so it can then send it to the user. This is an unusual interface, but it allows Shiny to control where the file should be saved (so it can be placed in a secure location) while you still control the contents of that file.\n\nNext we’ll put these pieces together to show how to transfer data files or reports to the user.\n\n### Downloading data\n\nThe following app shows off the basics of data download by allowing you to download any dataset in the datasets package as a tab separated file. \n\n::: {.callout-tip #tip-09-use-tsv-instead-of-csv}\n###### Use `.tsv' insteadof `csv`\n\nI recommend using `.tsv` (tab separated value) instead of `.csv` (comma separated values) because many European countries use commas to separate the whole and fractional parts of a number (e.g. 1,23 vs 1.23). This means they can’t use commas to separate fields and instead use semi-colons in so-called “c”sv files! You can avoid this complexity by using tab separated files, which work the same way everywhere.\n:::\n\n\n::: {.column-page-inset}\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-09-downloading-data}\n: Downloading data\n::::::\n:::\n::::{.my-r-code-container}\n\n```{shinylive-r}\n#| standalone: true\n#| viewerHeight: 650\n#| components: [editor, viewer]\n\nlibrary(shiny)\n\n# Workaround for Chromium Issue 468227 ######\n# Need this to properly download the csv file\n# this bug and workaround is only for shinylive, \n#you do not need it in your regular app\ndownloadButton <- function(...) {\n  tag <- shiny::downloadButton(...)\n  tag$attribs$download <- NULL\n  tag\n}\n### End of workaround ####\n\nui <- fluidPage(\n  selectInput(\"dataset\", \"Pick a dataset\", ls(\"package:datasets\")),\n  tableOutput(\"preview\"),\n  downloadButton(\"download\", \"Download .tsv\")\n)\n\nserver <- function(input, output, session) {\n  data <- reactive({\n    out <- get(input$dataset, \"package:datasets\")\n    if (!is.data.frame(out)) {\n      validate(paste0(\"'\", input$dataset, \"' is not a data frame\"))\n    }\n    out\n  })\n\n  output$preview <- renderTable({\n    head(data())\n  })\n\n  output$download <- downloadHandler(\n    filename = function() {\n      paste0(input$dataset, \".tsv\")\n    },\n    content = function(file) {\n      vroom::vroom_write(data(), file)\n    }\n  )\n}\n\nshinyApp(ui, server)\n```\n\n::::\n:::::\n\n::: \n\n::: {.callout-warning #wrn-09-downloading-data}\n###### Workaround for Chromium Issue\n\nTo properly download the file in `shinylive` you need a workaround.\n:::\n\nNote the use of `validate()` to only allow the user to download datasets that are data frames. A better approach would be to pre-filter the list, but this lets you see another application of `validate()`.\n\n### Downloading reports\n\nAs well as downloading data, you may want the users of your app to download a report that summarizes the result of interactive exploration in the Shiny app. This is quite a lot of work, because you also need to display the same information in a different format, but it is very useful for high-stakes apps.\n\nOne powerful way to generate such a report is with a [parameterised RMarkdown document](https://bookdown.org/yihui/rmarkdown/parameterized-reports.html). A parameterised <a class='glossary' title='RMarkdown is a file format for creating dynamic documents that combine text written in markdown with chunks of embedded R code. This allows users to weave together narrative text and code to produce elegantly formatted output, such as HTML, PDF, or Microsoft Word documents, among others.'>RMarkdown</a> file has a params field in the <a class='glossary' title='YAML stands for “YAML Ain’t Markup Language”, some people reverse it humorously to “Yet Another Markup Language.”) It is a human-readable data serialization language commonly used for configuration files and data transmission. YAML is designed with simplicity and readability in mind, using indentation and minimal punctuation to represent data structures, making it intuitive to read. There is a YAML package in R that provides methods to convert R data to YAML and back. https://yaml.org/ is the official website.'>YAML</a> metadata:\n\n````markdown\n\ntitle: My Document\noutput: html_document\nparams:\n  year: 2018\n  region: Europe\n  printcode: TRUE\n  data: file.csv\n\n````\n\nInside the document, you can refer to these values using `params$year`, `params$region` etc. The values in the YAML metadata are defaults; you’ll generally override them by providing the params argument in a call to `rmarkdown::render()`. This makes it easy to generate many different reports from the same <a class='glossary' title='“.Rmd” is a file extension used for RMarkdown files, which are documents that combine text, R code, and the results of that code execution. These files are used to create reproducible reports, presentations, and other documents that can be converted into various formats such as HTML, PDF, and Word. R ws users to write text in Markdown syntax and embed R code chunks, which are executed to produce output that is included in the final document (“literate programming”). This makes it easy to create dynamic documents that can be updated automatically when the underlying data or code changes.'>.Rmd</a>.\n\nHere’s a simple example adapted from <https://shiny.rstudio.com/articles/generating-reports.html>, which describes this technique in more detail. The key idea is to call `rmarkdown::render()` from the content argument of `downloadHander()`. If you want to produce other output formats, just change the output format in the `.Rmd`, and make sure to update the extension (e.g. to `.pdf`). See it in action at <https://hadley.shinyapps.io/ms-download-rmd>.\n\n\n\n::: {.column-page-inset}\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-09-downloading-reports}\n: Downloading reports\n::::::\n:::\n::::{.my-r-code-container}\n\n```{shinylive-r}\n#| standalone: true\n#| viewerHeight: 550\n#| components: [editor, viewer]\n\nlibrary(shiny)\n\n# shinylive Workaround Start ######\ndownloadButton <- function(...) {\n  tag <- shiny::downloadButton(...)\n  tag$attribs$download <- NULL\n  tag\n}\n### End of workaround ####\n\nui <- fluidPage(\n  sliderInput(\"n\", \"Number of points\", 1, 100, 50),\n  downloadButton(\"report\", \"Generate report\")\n)\n\nserver <- function(input, output, session) {\n  output$report <- downloadHandler(\n    filename = \"report.html\",\n    content = function(file) {\n      params <- list(n = input$n)\n\n      id <- showNotification(\n        \"Rendering report...\",\n        duration = NULL,\n        closeButton = FALSE\n      )\n      on.exit(removeNotification(id), add = TRUE)\n\n      rmarkdown::render(\"report.Rmd\",\n        output_file = file,\n        params = params,\n        envir = new.env(parent = globalenv())\n      )\n    }\n  )\n}\n\nshinyApp(ui, server)\n```\n\n::::\n:::::\n\n:::\n\nIt’ll generally take at least a few seconds to render a `.Rmd`, so this is a good place to use a notification from @sec-08-notification.\n\nThere are a couple of other tricks worth knowing about:\n\n- RMarkdown works in the current working directory, which will fail in many deployment scenarios (e.g. on <https:://shinyapps.io>). You can work around this by copying the report to a temporary directory when your app starts (i.e. outside of the server function):\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nreport_path <- tempfile(fileext = \".Rmd\")\nfile.copy(\"report.Rmd\", report_path, overwrite = TRUE)\n```\n:::\n\n\n\n\nThen replace \"report.Rmd\" with `report_path` in the call to `rmarkdown::render()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrmarkdown::render(report_path,\n  output_file = file,\n  params = params,\n  envir = new.env(parent = globalenv())\n)\n```\n:::\n\n\n\n\n- By default, RMarkdown will render the report in the current process, which means that it will inherit many settings from the Shiny app (like loaded packages, options, etc). For greater robustness, I recommend running `render()` in a separate R session using the {**callr**} package:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrender_report <- function(input, output, params) {\n  rmarkdown::render(input,\n    output_file = output,\n    params = params,\n    envir = new.env(parent = globalenv())\n  )\n}\n\nserver <- function(input, output) {\n  output$report <- downloadHandler(\n    filename = \"report.html\",\n    content = function(file) {\n      params <- list(n = input$slider)\n      callr::r(\n        render_report,\n        list(input = report_path, output = file, params = params)\n      )\n    }\n  )\n}\n```\n:::\n\n\n\n\n::: {.column-page-inset}\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-09-download-report}\n: Download report\n::::::\n:::\n::::{.my-r-code-container}\n\n```{shinylive-r}\n#| standalone: true\n#| viewerHeight: 550\n#| components: [editor, viewer]\n\nlibrary(shiny)\n\n# shinylive Workaround Start ######\ndownloadButton <- function(...) {\n  tag <- shiny::downloadButton(...)\n  tag$attribs$download <- NULL\n  tag\n}\n### End of workaround ####\n\n# Copy report to temporary directory. This is mostly important when\n# deploying the app, since often the working directory won't be writable\nreport_path <- tempfile(fileext = \".Rmd\")\nfile.copy(\"report.Rmd\", report_path, overwrite = TRUE)\n\nrender_report <- function(input, output, params) {\n  rmarkdown::render(input,\n    output_file = output,\n    params = params,\n    envir = new.env(parent = globalenv())\n  )\n}\n\nui <- fluidPage(\n  sliderInput(\"n\", \"Number of points\", 1, 100, 50),\n  downloadButton(\"report\", \"Generate report\")\n)\n\nserver <- function(input, output) {\n  output$report <- downloadHandler(\n    filename = \"report.html\",\n    content = function(file) {\n      params <- list(n = input$n)\n      callr::r(\n        render_report,\n        list(input = report_path, output = file, params = params)\n      )\n    }\n  )\n}\n\nshinyApp(ui, server)\n```\n\n::::\n:::::\n\n:::\n\n\n::: {.callout-warning  #wrn-09-download-report-failure}\nThe last two code chunk didn't work.\n\n> Warning: Error in : ! in callr subprocess      \n> Caused by error in `abs_path(input)`:          \n> ! The file '/var/folders/sd/g6yc4rq1731__gh38rw8whvc0000gr/T//RtmplpyWiO/file422772b5bfd1.Rmd' does not exist.\n:::\n\nYou can see all these pieces put together in [rmarkdown-report/](https://github.com/hadley/mastering-shiny/tree/main/rmarkdown-report), found inside the Mastering Shiny GitHub repo.\n\nThe {**shinymeta**} package solves a related problem: sometimes you need to be able to turn the current state of a Shiny app into a reproducible report that can be re-run in the future. Learn more about it in Joe Cheng’s useR! 2019 keynote, “[Shiny’s holy grail](https://www.youtube.com/watch?v=5KByRC6eqC8): Interactivity with reproducibility”.\n\n\n## Case study\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}