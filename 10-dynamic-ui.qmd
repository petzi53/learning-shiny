# Dynamic UI {#sec-chap10}


```{r}
#| label: setup
#| results: hold
#| include: false

base::source(file = "R/helper.R")

library(glossary)
glossary::glossary_path("../glossary-pb/glossary.yml")

```

## Table of content for chapter 10 {.unnumbered}

::::: {#obj-chap03}
:::: {.my-objectives}
::: {.my-objectives-header}
Chapter section list
:::

::: {.my-objectives-container}


:::
::::
:::::

There are three key techniques for creating dynamic user interfaces:

- Using the update family of functions to modify parameters of input controls.
- Using `tabsetPanel()` to conditionally show and hide parts of the user interface.
- Using `uiOutput()` and `renderUI()` to generate selected parts of the user interface with code.


## Updating inputs

We’ll begin with a simple technique that allows you to modify an input after it has been created: the update family of functions. [Every input control]{.mark}, e.g. `textInput()`, [is paired with an **update function**]{.mark}, e.g. `updateTextInput()`, that allows you to modify the control after it has been created.

The key idea to modify an input is to use `observeEvent()` to trigger the corresponding update<whatever> function whenever the input changes. (For the `observeEvent()` function see @sec-03-observers and @XXX15.3.)

::: {.column-page-inset}

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-10-updating-inputs-intro}
: Updating the slider whenever the the minimum or maximum input changes
::::::
:::
::::{.my-r-code-container}

```{shinylive-r}
#| standalone: true
#| viewerHeight: 400
#| components: [editor, viewer]

## file: app.R
{{< include apps_10/01-updating-inputs-intro/app.R >}}
```



::::
:::::

::: 

### Simple uses

#### Reset button


The simplest uses of the update functions are to provide small conveniences for the user. For example, maybe you want to make it easy to reset parameters back to their initial value.

::: {.column-page-inset}

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-10-updating-with-reset-button}
: Updating controls with reset button
::::::
:::
::::{.my-r-code-container}
```{shinylive-r}
#| standalone: true
#| viewerHeight: 400
#| components: [editor, viewer]

## file: app.R
{{< include apps_10/02-updating-with-reset-button/app.R >}}
```
::::
:::::

::: 


### Button changed functionality

A similar application is to tweak the text of an action button so you know exactly what it’s going to do.


::: {.column-page-inset}

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-10-updating-vutton-text}
: Updating button text if it has changed functionality
::::::
:::
::::{.my-r-code-container}
```{shinylive-r}
#| standalone: true
#| viewerHeight: 400
#| components: [editor, viewer]

## file: app.R
{{< include apps_10/03-updating-button-text/app.R >}}
```
::::
:::::

::: 

### Hierarchical select boxes {#sec-10-hierarchical-selct-boxes}

A more complicated, but particularly useful, application of the update functions is to allow interactive drill down across multiple categories. I’ll illustrate their usage with some imaginary data for a sales dashboard.

:::::{.my-resource}
:::{.my-resource-header}
:::::: {#lem-10-kaggle}
: Kaggle --- An online community platform for data scientists and machine learning enthusiasts
::::::
:::
::::{.my-resource-container}
This section uses [Sample Sales Data](https://www.kaggle.com/datasets/kyanyoga/sample-sales-data), a well-documented imaginary dataset provided by `r glossary("Kaggle")` for education, training and research. To download the dataset from Kaggle you have to register. But you can also download the Sample Sales Data as `r glossary("CSV", ".csv")` file from the [GitHub repo of Mastering Shiny](https://github.com/hadley/mastering-shiny/raw/refs/heads/main/sales-dashboard/sales_data_sample.csv) or alternatively my own version of the dataset.

***

[Kaggle](https://www.kaggle.com/) is one of the largest hosting platforms used by data scientists and machine learning enthusiasts globally. It allows users to collaborate with other users, find and publish datasets, use GPU integrated notebooks, and compete with other data scientists to solve data science challenges.  

Founded in 2010 by [Anthony Goldbloom](https://en.wikipedia.org/wiki/Anthony_Goldbloom) and [Jeremy Howard](https://en.wikipedia.org/wiki/Jeremy_Howard_(entrepreneur)), Kaggle was acquired by Google in 2017. 
::::
:::::

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-10-load-sales-dataset}
: Load and display sales dataset
::::::
:::
::::{.my-r-code-container}
```{r}
#| label: code-chunk-name

sales <- vroom::vroom("data/sales_data_sample.csv", col_types = list(), na = "")
sales  |> 
  dplyr::select(TERRITORY, CUSTOMERNAME, ORDERNUMBER, dplyr::everything()) |> 
  dplyr::arrange(ORDERNUMBER)
```

::::
:::::

For this demo, I’m going to focus on a natural hierarchy in the data:

- Each territory contains customers.
- Each customer has multiple orders.
- Each order contains rows.

I want to create a user interface where you can:

- Select a territory to see all customers.
- Select a customer to see all orders.
- Select an order to see the underlying rows.

The essence of the UI is simple: I’ll create three select boxes and one output table. The choices for the `customername` and `ordernumber` select boxes will be dynamically generated, so I set `choices = NULL`.

In the server function, there is th following top-down procedure to follow:

:::::{.my-procedure}
:::{.my-procedure-header}
:::::: {#prp-10-replicate-hierarchical-data-structure}
: Replicating the hierarchical data structure in the server function
::::::
:::
::::{.my-procedure-container}

1. Create a reactive, `territory()`, that contains the rows from sales that match the selected territory.
2. Whenever `territory()` changes, update the list of choices in the `input$customername` select box.
3. Create another reactive, `customer()`, that contains the rows from `territory()` that match the selected customer.
4. Whenever `customer()` changes, update the list of choices in the `input$ordernumber` select box.
5. Display the selected orders in `output$data`.

::::
:::::

:::{.column-page-inset}

:::::{.my-example}
:::{.my-example-header}
:::::: {#exm-10-updating-nested}
: Hierarchical select boxes
::::::
:::
::::{.my-example-container}

::: {.panel-tabset}

###### First take

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-10-updating-nested1}
: Hierarchical select boxes: Small demo
::::::
:::
::::{.my-r-code-container}
::: {#lst-10-updating-nested1}

```{shinylive-r}
#| standalone: true
#| viewerHeight: 550
#| components: [editor, viewer]

## file: app.R
{{< include apps_10/04-updating-nested1/app.R >}}
```

Small demo of hierarchical select boxes
:::

::::
:::::


###### Improved demo

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-10-updating-nested2}
: Hierarchical select boxes: More fleshed out
::::::
:::
::::{.my-r-code-container}
::: {#lst-10-updating-nested2}


```{shinylive-r}
#| standalone: true
#| viewerHeight: 550
#| components: [editor, viewer]


## file: app.R
{{< include apps_10/04-updating-nested2/app.R >}}

```

Hierarchical select boxes: more fleshed out demo
:::

::::
:::::

:::

::::
:::::

:::

::: {.callout-warning #wrn-10-upating-nested}
###### Couldn't load data without user input

To get a version that works with Shiny and shinylive-r at the same time, I had to provide `fileInput()`. This is suboptimal as the user has to find and select the file to get the intended data for playing around.

It was easy to find a solution for Shiny: Just load the data before the ui/server part into an R object and then reference it from the `server()` function. I couldn’t manage the same result for `shinylive-r`. Local references, relative URL and non-HTTPS URL generate error. The only possible way seems to doanload the data via HTTPS. I tried but didn’t succeed. I asked for help via the [Posit Community](https://forum.posit.co/t/shinylive-in-quarto-document-with-reactive-data-source/204237) and are currently waiting for answers.

A workaround was to provide a file upload control. But even to create a workable demo took me hours. It was a bitter experience to learn that I still didn't understand quite well how reactives work. As the debugger `browser()` did not work, it was finally for me quite helpful to install `print()` outputs in **every** reactive function to see what happens. In the end I solved this problem with three important changes:

1. Creating a reactive value with `sales <- reactiveVal()`.
2. Adding an `observeEvent()` function which fulfilled several tasks:
    - Loading the data after `fileInput()` was active.  
    - Assigning the file to the reactive value `sales`.
    - Updating with the data the choice of the territory `selectInput()` function. (Previously I had to set the UI choices for territory to NULL to prevent an error because the data was not available at start up.)
3. The reference to the previous `sales` object had to be changed to the reactive function `sales()`. Additional had I to add `req(input$upload)` to prevent that the reactive territory function is called immediately after start up without available data.
:::

### Freezing reactive inputs

Sometimes hierarchical selections can briefly create an invalid set of inputs, leading to a flicker of undesirable output.

:::{.column-page-inset}

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-10-freezing-reactive-input1}
: Flicker of undesirable output
::::::
:::
::::{.my-r-code-container}
```{shinylive-r}
#| standalone: true
#| viewerHeight: 550
#| components: [editor, viewer]

## file: app.R
{{< include apps_10/05-freezing-reactive-input1/app.R >}}
```

::::
:::::

:::

You’ll notice that when you switch datasets the summary output will briefly flicker. That’s because `updateSelectInput()` only has an effect after all outputs and observers have run, so there’s temporarily a state where you have dataset B and a variable from dataset A, so that the output contains summary(NULL).

You can resolve this problem by “freezing” the input with `freezeReactiveValue()`. This ensures that any reactives or outputs that use the input won’t be updated until the next full round of invalidation. It’s good practice to **always** use it when you dynamically change an input value.

:::{.column-page-inset}

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-10-freezing-reactive-input2}
: Freezing input with `freezeReactiveValaue()`
::::::
:::
::::{.my-r-code-container}
```{shinylive-r}
#| standalone: true
#| viewerHeight: 550
#| components: [editor, viewer]

## file: app.R
{{< include apps_10/05-freezing-reactive-input2/app.R >}}
```
::::
:::::

:::

### Circular references

Using an update function to modify value is no different to the user modifying the value by clicking or typing. That means an update function can trigger reactive updates in exactly the same way that a human can. This means that you are now stepping outside of the bounds of pure reactive programming, and you need to start worrying about circular references and infinite loops.


````markdown

library(shiny)

ui <- fluidPage(
    actionButton("action", "start"),
    numericInput("n", "n", 0)
)
server <- function(input, output, session) {
    observeEvent(input$n,
                 updateNumericInput(inputId = "n", value = input$n + 1)
    )
}

shinyApp(ui, server)

````
For example, take the simple app above. It contains a single input control and an observer that increments its value by one. Every time `updateNumericInput()` runs, it changes `input$n`, causing `updateNumericInput()` to run again, so the app gets stuck in an infinite loop constantly increasing the value of `input$n`.

To prevent that the circular reference runs all the time I had to add a start and a stop button. This was a welcome training occasion for me. I used as help the article [Using Action Buttons](https://shiny.posit.co/r/articles/build/action-buttons/).


:::{.column-page-inset}

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-10-circular-references}
: Demonstration of circular references
::::::
:::
::::{.my-r-code-container}
```{shinylive-r}
#| standalone: true
#| viewerHeight: 550
#| components: [editor, viewer]

## file: app.R
{{< include apps_10/06-circular-references2/app.R >}}
```
::::
:::::

:::

### Inter-related inputs

One place where it’s easy to end up with circular references is when you have multiple “sources of truth” in an app. For example, imagine that you want to create a temperature conversion app where you can either enter the temperature in Celsius or in Fahrenheit:

:::{.column-page-inset}

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-10-inter-realted-inputs}
: Demo of inter-related inputs
::::::
:::
::::{.my-r-code-container}
```{shinylive-r}
#| standalone: true
#| viewerHeight: 550
#| components: [editor, viewer]

## file: app.R
{{< include apps_10/07-inter-related-inputs/app.R >}}
```
::::
:::::

:::

If you play around with this app you’ll notice that it mostly works, but you might notice that it’ll sometimes trigger multiple changes. For example:

- Set 120 F, then click the down arrow.
- F changes to 119, and C is updated to 48.
- 48 C converts to 118 F, so F changes again to 118.
- Fortunately 118 F is still 48 C, so the updates stop there.

There’s no way around this problem because you have one idea (the temperature) with two expressions in the app (Celsius and Fahrenheit). Here we are lucky that cycle quickly converges to a value that satisfies both constraints. In general, you are better off avoiding these situations, unless you are willing to very carefully analyse the convergence properties of the underlying dynamic system that you’ve created.

### Exercises

#### Update date

##### Task description

Complete the user interface below with a server function that updates `input$date` so that you can only select dates in `input$year`.

##### Solution

::: {.column-page-inset}

:::::{.my-exercise}
:::{.my-exercise-header}
:::::: {#exr-10-ex-01-updating-date1}
: Update date input to limit the choices for the selected year
::::::
:::
::::{.my-exercise-container}
```{shinylive-r}
#| standalone: true
#| viewerHeight: 550
#| components: [editor, viewer]

## file: app.R
{{< include apps_10/ex-01-updating-date1/app.R >}}
```


::::
:::::

::: 



### Update county by chosen state

#### Task description

Complete the user interface below with a server function that updates `input$county` choices based on `input$state`. For an added challenge, also change the label from “County” to “Parish” for Louisiana and “Borough” for Alaska.

#### Solution

::: {.column-page-inset}

:::::{.my-exercise}
:::{.my-exercise-header}
:::::: {#exr-10-ex-02-updating-county}
: Update county by chose state
::::::
:::
::::{.my-exercise-container}
```{shinylive-r}
#| standalone: true
#| viewerHeight: 550
#| components: [editor, viewer]

## file: app.R
{{< include apps_10/ex-02-updating-county/app.R >}}
```


::::
:::::

::: 


### Update country by chosen continent

#### Task description

Complete the user interface below with a server function that updates `input$country` choices based on the `input$continent`. Use `output$data` to display all matching rows.

#### Solution

::: {.column-page-inset}


:::::{.my-exercise}
:::{.my-exercise-header}
:::::: {#exr-10-ex-03-updating-country}
: Updating country by chosen state
::::::
:::
::::{.my-exercise-container}
```{shinylive-r}
#| standalone: true
#| viewerHeight: 550
#| components: [editor, viewer]

## file: app.R
{{< include apps_10/ex-03-updating-country/app.R >}}
```

::::
:::::

::: 

### Updating with additional country value

#### Task description

Extend the previous app so that you can also choose to select all continents, and hence see all countries. You’ll need to add `"(All)"` to the list of choices, and then handle that specially when filtering.

#### Solution

::: {.column-page-inset}


:::::{.my-exercise}
:::{.my-exercise-header}
:::::: {#exr-10-ex04-updating-country-all}
: Show all countries when continent "All" was chosen
::::::
:::
::::{.my-exercise-container}
```{shinylive-r}
#| standalone: true
#| viewerHeight: 550
#| components: [editor, viewer]

## file: app.R
{{< include apps_10/ex-04-updating-country-all/app.R >}}
```


::::
:::::

::: 

### Mutually dependent input

#### Task description

What is at the heart of the problem described at <https://community.rstudio.com/t/29307>?

#### Solution

It is a circular reference because the different `numericInput()` are mutually dependent to each other. The first `observeEvent()` listens for `input$A` and changes `input$B`. But the second `observeEvent()` which listens for `input$B` changes `input$A` and therefore triggers the first `observeEvent()` creating an endless circular reference.

## Glossary Entries {#unnumbered}

```{r}
#| label: glossary-table
#| echo: false

glossary_table()
```

------------------------------------------------------------------------

## Session Info {.unnumbered}

::: my-r-code
::: my-r-code-header
Session Info
:::

::: my-r-code-container
```{r}
#| label: session-info

sessioninfo::session_info()
```
:::
:::

